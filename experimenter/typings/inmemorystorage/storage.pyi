"""
This type stub file was generated by pyright.
"""

from django.core.files.base import File
from django.core.files.storage import Storage
from django.utils.deconstruct import deconstructible

class PathDoesNotExist(Exception): ...

class InMemoryNode:
    """
    Base class for files and directories.
    """

    parent = ...
    def add_child(self, name, child): ...

class InMemoryFile(InMemoryNode, File):
    """
    Stores contents of file and stores reference to parent. File interface is identical
    to ContentFile, except that self.size works even after data has been written to it
    """

    def __init__(self, content=..., parent=..., name=...) -> None: ...
    def __str__(self) -> str: ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def open(self, mode=...): ...
    def close(self): ...

class InMemoryDir(InMemoryNode):
    """
    Stores dictionary of child directories/files and reference to parent.
    """

    def __init__(self, dirs=..., files=..., parent=...) -> None: ...
    def resolve(self, path, create=..., use_bytes=...): ...
    def ls(self, path=...): ...
    def listdir(self, dir): ...
    def delete(self, path): ...
    def exists(self, name): ...
    def size(self, name): ...
    def open(self, path, mode=...): ...
    def save(self, path, content): ...

_filesystem = ...

@deconstructible
class InMemoryStorage(Storage):
    """
    Django storage class for in-memory filesystem.
    """

    def __init__(self, filesystem=..., base_url=...) -> None: ...
    def listdir(self, dir): ...
    def delete(self, path): ...
    def exists(self, name): ...
    def size(self, name): ...
    def url(self, name): ...
    def modified_time(self, name): ...
    def accessed_time(self, name): ...
    def created_time(self, name): ...
    def __eq__(self, other) -> bool: ...
