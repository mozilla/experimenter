"""
This type stub file was generated by pyright.
"""

class Error:
    def __init__(self, error, traceback=..., row=...) -> None: ...

class RowResult:
    IMPORT_TYPE_UPDATE = ...
    IMPORT_TYPE_NEW = ...
    IMPORT_TYPE_DELETE = ...
    IMPORT_TYPE_SKIP = ...
    IMPORT_TYPE_ERROR = ...
    IMPORT_TYPE_INVALID = ...
    valid_import_types = ...
    def __init__(self) -> None: ...
    def add_instance_info(self, instance): ...

class InvalidRow:
    """A row that resulted in one or more ``ValidationError`` being raised during import."""

    def __init__(self, number, validation_error, values) -> None: ...
    @property
    def field_specific_errors(self):  # -> dict[Unknown | str, Unknown]:
        """Returns a dictionary of field-specific validation errors for this row."""
        ...
    @property
    def non_field_specific_errors(self):  # -> list[Unknown]:
        """Returns a list of non field-specific validation errors for this row."""
        ...
    @property
    def error_count(self):  # -> int:
        """Returns the total number of validation errors for this row."""
        ...

class Result:
    def __init__(self, *args, **kwargs) -> None: ...
    def valid_rows(self): ...
    def append_row_result(self, row_result): ...
    def append_base_error(self, error): ...
    def add_dataset_headers(self, headers): ...
    def append_failed_row(self, row, error): ...
    def append_invalid_row(self, number, row, validation_error): ...
    def increment_row_result_total(self, row_result): ...
    def row_errors(self): ...
    def has_errors(self):  # -> bool:
        """Returns a boolean indicating whether the import process resulted in
        any critical (non-validation) errors for this result."""
        ...
    def has_validation_errors(self):  # -> bool:
        """Returns a boolean indicating whether the import process resulted in
        any validation errors for this result."""
        ...
    def __iter__(self): ...
