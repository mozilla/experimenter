"""
This type stub file was generated by pyright.
"""

_re_token = ...
random = ...
mod_random = ...

class Generator:
    __config = ...
    def __init__(self, **config) -> None: ...
    def add_provider(self, provider): ...
    def provider(self, name): ...
    def get_providers(self):  # -> list[Unknown]:
        """Returns added providers."""
        ...
    @property
    def random(self): ...
    @random.setter
    def random(self, value): ...
    def seed_instance(self, seed=...):  # -> Self@Generator:
        """Calls random.seed"""
        ...
    @classmethod
    def seed(cls, seed=...): ...
    def format(self, formatter, *args, **kwargs):  # -> Any:
        """
        This is a secure way to make a fake from another Provider.
        """
        ...
    def get_formatter(self, formatter): ...
    def set_formatter(self, name, method):  # -> None:
        """
        This method adds a provider method to generator.
        Override this method to add some decoration or logging stuff.
        """
        ...
    def set_arguments(self, group, argument, value=...):  # -> None:
        """
        Creates an argument group, with an individual argument or a dictionary
        of arguments. The argument groups is used to apply arguments to tokens,
        when using the generator.parse() method. To further manage argument
        groups, use get_arguments() and del_arguments() methods.

        generator.set_arguments('small', 'max_value', 10)
        generator.set_arguments('small', {'min_value': 5, 'max_value': 10})
        """
        ...
    def get_arguments(self, group, argument=...):  # -> None:
        """
        Get the value of an argument configured within a argument group, or
        the entire group as a dictionary. Used in conjunction with the
        set_arguments() method.

        generator.get_arguments('small', 'max_value')
        generator.get_arguments('small')
        """
        ...
    def del_arguments(self, group, argument=...):  # -> None:
        """
        Delete an argument from an argument group or the entire argument group.
        Used in conjunction with the set_arguments() method.

        generator.del_arguments('small')
        generator.del_arguments('small', 'max_value')
        """
        ...
    def parse(self, text):  # -> str:
        """
        Replaces tokens like '{{ tokenName }}' or '{{tokenName}}' in a string with
        the result from the token method call. Arguments can be parsed by using an
        argument group. For more information on the use of argument groups, please
        refer to the set_arguments() method.

        Example:

        generator.set_arguments('red_rgb', {'hue': 'red', 'color_format': 'rgb'})
        generator.set_arguments('small', 'max_value', 10)

        generator.parse('{{ color:red_rgb }} - {{ pyint:small }}')
        """
        ...
