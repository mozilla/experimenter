"""
This type stub file was generated by pyright.
"""

import contextlib

"""Simple wrappers around Factory class definition."""

@contextlib.contextmanager
def debug(logger=..., stream=...): ...
def make_factory(klass, **kwargs):  # -> Any:
    """Create a new, simple factory for the given class."""

    class Meta: ...

def build(klass, **kwargs):  # -> Any:
    """Create a factory for the given class, and build an instance."""
    ...

def build_batch(klass, size, **kwargs):  # -> Any:
    """Create a factory for the given class, and build a batch of instances."""
    ...

def create(klass, **kwargs):  # -> Any:
    """Create a factory for the given class, and create an instance."""
    ...

def create_batch(klass, size, **kwargs):  # -> Any:
    """Create a factory for the given class, and create a batch of instances."""
    ...

def stub(klass, **kwargs):  # -> Any:
    """Create a factory for the given class, and stub an instance."""
    ...

def stub_batch(klass, size, **kwargs):  # -> Any:
    """Create a factory for the given class, and stub a batch of instances."""
    ...

def generate(klass, strategy, **kwargs):  # -> Any:
    """Create a factory for the given class, and generate an instance."""
    ...

def generate_batch(klass, strategy, size, **kwargs):  # -> Any:
    """Create a factory for the given class, and generate instances."""
    ...

def simple_generate(klass, create, **kwargs):  # -> Any:
    """Create a factory for the given class, and simple_generate an instance."""
    ...

def simple_generate_batch(klass, create, size, **kwargs):  # -> Any:
    """Create a factory for the given class, and simple_generate instances."""
    ...

def lazy_attribute(func): ...
def iterator(func):  # -> Iterator:
    """Turn a generator function into an iterator attribute."""
    ...

def sequence(func): ...
def lazy_attribute_sequence(func): ...
def container_attribute(func): ...
def post_generation(fun): ...
