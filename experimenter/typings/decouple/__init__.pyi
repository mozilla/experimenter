"""
This type stub file was generated by pyright.
"""

import os
import string
import sys
from collections import OrderedDict
from configparser import ConfigParser
from io import open
from shlex import shlex

from ConfigParser import SafeConfigParser as ConfigParser

PYVERSION = ...
if PYVERSION >= (3, 0, 0):
    text_type = ...
else:
    text_type = ...
if PYVERSION >= (3, 2, 0):
    read_config = ...
else:
    read_config = ...
DEFAULT_ENCODING = ...
TRUE_VALUES = ...
FALSE_VALUES = ...

def strtobool(value): ...

class UndefinedValueError(Exception): ...

class Undefined:
    """
    Class to represent undefined type.
    """

    ...

undefined = ...

class Config:
    """
    Handle .env file format used by Foreman.
    """

    def __init__(self, repository) -> None: ...
    def get(self, option, default=..., cast=...):  # -> str | bool:
        """
        Return the value for option or default if defined.
        """
        ...
    def __call__(self, *args, **kwargs):  # -> str | bool:
        """
        Convenient shortcut to get.
        """
        ...

class RepositoryEmpty:
    def __init__(self, source=..., encoding=...) -> None: ...
    def __contains__(self, key): ...
    def __getitem__(self, key): ...

class RepositoryIni(RepositoryEmpty):
    """
    Retrieves option keys from .ini files.
    """

    SECTION = ...
    def __init__(self, source, encoding=...) -> None: ...
    def __contains__(self, key): ...
    def __getitem__(self, key): ...

class RepositoryEnv(RepositoryEmpty):
    """
    Retrieves option keys from .env files with fall back to os.environ.
    """

    def __init__(self, source, encoding=...) -> None: ...
    def __contains__(self, key): ...
    def __getitem__(self, key): ...

class RepositorySecret(RepositoryEmpty):
    """
    Retrieves option keys from files,
    where title of file is a key, content of file is a value
    e.g. Docker swarm secrets
    """

    def __init__(self, source=...) -> None: ...
    def __contains__(self, key): ...
    def __getitem__(self, key): ...

class AutoConfig:
    """
    Autodetects the config file and type.

    Parameters
    ----------
    search_path : str, optional
        Initial search path. If empty, the default search path is the
        caller's path.

    """

    SUPPORTED = ...
    encoding = ...
    def __init__(self, search_path=...) -> None: ...
    def __call__(self, *args, **kwargs): ...

config = ...

class Csv:
    """
    Produces a csv parser that return a list of transformed elements.
    """

    def __init__(self, cast=..., delimiter=..., strip=..., post_process=...) -> None:
        """
        Parameters:
        cast -- callable that transforms the item just before it's added to the list.
        delimiter -- string of delimiters chars passed to shlex.
        strip -- string of non-relevant characters to be passed to str.strip after the split.
        post_process -- callable to post process all casted values. Default is `list`.
        """
        ...
    def __call__(self, value):  # -> list[Unknown]:
        """The actual transformation"""
        ...

class Choices:
    """
    Allows for cast and validation based on a list of choices.
    """

    def __init__(self, flat=..., cast=..., choices=...) -> None:
        """
        Parameters:
        flat -- a flat list of valid choices.
        cast -- callable that transforms value before validation.
        choices -- tuple of Django-like choices.
        """
        ...
    def __call__(self, value): ...
