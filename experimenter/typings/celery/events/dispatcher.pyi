"""
This type stub file was generated by pyright.
"""

"""Event dispatcher sends events."""
__all__ = ("EventDispatcher",)

class EventDispatcher:
    """Dispatches event messages.

    Arguments:
        connection (kombu.Connection): Connection to the broker.

        hostname (str): Hostname to identify ourselves as,
            by default uses the hostname returned by
            :func:`~celery.utils.anon_nodename`.

        groups (Sequence[str]): List of groups to send events for.
            :meth:`send` will ignore send requests to groups not in this list.
            If this is :const:`None`, all events will be sent.
            Example groups include ``"task"`` and ``"worker"``.

        enabled (bool): Set to :const:`False` to not actually publish any
            events, making :meth:`send` a no-op.

        channel (kombu.Channel): Can be used instead of `connection` to specify
            an exact channel to use when sending events.

        buffer_while_offline (bool): If enabled events will be buffered
            while the connection is down. :meth:`flush` must be called
            as soon as the connection is re-established.

    Note:
        You need to :meth:`close` this after use.
    """

    DISABLED_TRANSPORTS = ...
    app = ...
    on_enabled = ...
    on_disabled = ...
    def __init__(
        self,
        connection=...,
        hostname=...,
        enabled=...,
        channel=...,
        buffer_while_offline=...,
        app=...,
        serializer=...,
        groups=...,
        delivery_mode=...,
        buffer_group=...,
        buffer_limit=...,
        on_send_buffered=...,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info): ...
    def enable(self): ...
    def disable(self): ...
    def publish(self, type, fields, producer, blind=..., Event=..., **kwargs):  # -> None:
        """Publish event using custom :class:`~kombu.Producer`.

        Arguments:
            type (str): Event type name, with group separated by dash (`-`).
                fields: Dictionary of event fields, must be json serializable.
            producer (kombu.Producer): Producer instance to use:
                only the ``publish`` method will be called.
            retry (bool): Retry in the event of connection failure.
            retry_policy (Mapping): Map of custom retry policy options.
                See :meth:`~kombu.Connection.ensure`.
            blind (bool): Don't set logical clock value (also don't forward
                the internal logical clock).
            Event (Callable): Event type used to create event.
                Defaults to :func:`Event`.
            utcoffset (Callable): Function returning the current
                utc offset in hours.
        """
        ...
    def send(
        self,
        type,
        blind=...,
        utcoffset=...,
        retry=...,
        retry_policy=...,
        Event=...,
        **fields
    ):  # -> None:
        """Send event.

        Arguments:
            type (str): Event type name, with group separated by dash (`-`).
            retry (bool): Retry in the event of connection failure.
            retry_policy (Mapping): Map of custom retry policy options.
                See :meth:`~kombu.Connection.ensure`.
            blind (bool): Don't set logical clock value (also don't forward
                the internal logical clock).
            Event (Callable): Event type used to create event,
                defaults to :func:`Event`.
            utcoffset (Callable): unction returning the current utc offset
                in hours.
            **fields (Any): Event fields -- must be json serializable.
        """
        ...
    def flush(self, errors=..., groups=...):  # -> None:
        """Flush the outbound buffer."""
        ...
    def extend_buffer(self, other):  # -> None:
        """Copy the outbound buffer of another instance."""
        ...
    def close(self):  # -> None:
        """Close the event dispatcher."""
        ...
    publisher = ...
