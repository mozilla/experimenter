"""
This type stub file was generated by pyright.
"""

import click
from click import ParamType
from kombu.utils.objects import cached_property

"""Click customizations for Celery."""

class CLIContext:
    """Context Object for the CLI."""

    def __init__(self, app, no_color, workdir, quiet=...) -> None:
        """Initialize the CLI context."""
        ...
    @cached_property
    def OK(self): ...
    @cached_property
    def ERROR(self): ...
    def style(self, message=..., **kwargs): ...
    def secho(self, message=..., **kwargs): ...
    def echo(self, message=..., **kwargs): ...
    def error(self, message=..., **kwargs): ...
    def pretty(self, n): ...
    def pretty_list(self, n): ...
    def pretty_dict_ok_error(self, n): ...
    def say_chat(self, direction, title, body=..., show_body=...): ...

def handle_preload_options(
    f,
):  # -> (ctx: Unknown, *args: Unknown, **kwargs: Unknown) -> Unknown:
    """Extract preload options and return a wrapped callable."""
    ...

class CeleryOption(click.Option):
    """Customized option for Celery."""

    def get_default(self, ctx, *args, **kwargs): ...
    def __init__(self, *args, **kwargs) -> None:
        """Initialize a Celery option."""
        ...

class CeleryCommand(click.Command):
    """Customized command for Celery."""

    def format_options(self, ctx, formatter):  # -> None:
        """Write all the options into the formatter if they exist."""
        ...

class CeleryDaemonCommand(CeleryCommand):
    """Daemon commands."""

    def __init__(self, *args, **kwargs) -> None:
        """Initialize a Celery command with common daemon options."""
        ...

class CommaSeparatedList(ParamType):
    """Comma separated list argument."""

    name = ...
    def convert(self, value, param, ctx): ...

class JsonArray(ParamType):
    """JSON formatted array argument."""

    name = ...
    def convert(self, value, param, ctx): ...

class JsonObject(ParamType):
    """JSON formatted object argument."""

    name = ...
    def convert(self, value, param, ctx): ...

class ISO8601DateTime(ParamType):
    """ISO 8601 Date Time argument."""

    name = ...
    def convert(self, value, param, ctx): ...

class ISO8601DateTimeOrFloat(ParamType):
    """ISO 8601 Date Time or float argument."""

    name = ...
    def convert(self, value, param, ctx): ...

class LogLevel(click.Choice):
    """Log level option."""

    def __init__(self) -> None:
        """Initialize the log level option with the relevant choices."""
        ...
    def convert(self, value, param, ctx): ...

JSON_ARRAY = ...
JSON_OBJECT = ...
ISO8601 = ...
ISO8601_OR_FLOAT = ...
LOG_LEVEL = ...
COMMA_SEPARATED_LIST = ...
