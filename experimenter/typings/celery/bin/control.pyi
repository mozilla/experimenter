"""
This type stub file was generated by pyright.
"""

import click
from celery.bin.base import (
    COMMA_SEPARATED_LIST,
    CeleryCommand,
    CeleryOption,
    handle_preload_options,
)
from celery.worker.control import Panel

"""The ``celery control``, ``. inspect`` and ``. status`` programs."""

@click.command(cls=CeleryCommand)
@click.option(
    "-t",
    "--timeout",
    cls=CeleryOption,
    type=float,
    default=1,
    help_group="Remote Control Options",
    help="Timeout in seconds waiting for reply.",
)
@click.option(
    "-d",
    "--destination",
    cls=CeleryOption,
    type=COMMA_SEPARATED_LIST,
    help_group="Remote Control Options",
    help="Comma separated list of destination node names.",
)
@click.option(
    "-j",
    "--json",
    cls=CeleryOption,
    is_flag=True,
    help_group="Remote Control Options",
    help="Use json as output format.",
)
@click.pass_context
@handle_preload_options
def status(ctx, timeout, destination, json, **kwargs):  # -> None:
    """Show list of workers that are online."""
    ...

@click.command(cls=CeleryCommand, context_settings={"allow_extra_args": True})
@click.argument(
    "action",
    type=click.Choice(
        [
            name
            for (name, info) in Panel.meta.items()
            if info.type == "inspect" and info.visible
        ]
    ),
)
@click.option(
    "-t",
    "--timeout",
    cls=CeleryOption,
    type=float,
    default=1,
    help_group="Remote Control Options",
    help="Timeout in seconds waiting for reply.",
)
@click.option(
    "-d",
    "--destination",
    cls=CeleryOption,
    type=COMMA_SEPARATED_LIST,
    help_group="Remote Control Options",
    help="Comma separated list of destination node names.",
)
@click.option(
    "-j",
    "--json",
    cls=CeleryOption,
    is_flag=True,
    help_group="Remote Control Options",
    help="Use json as output format.",
)
@click.pass_context
@handle_preload_options
def inspect(ctx, action, timeout, destination, json, **kwargs):  # -> None:
    """Inspect the worker at runtime.

    Availability: RabbitMQ (AMQP) and Redis transports.
    """
    ...

@click.command(cls=CeleryCommand, context_settings={"allow_extra_args": True})
@click.argument(
    "action",
    type=click.Choice(
        [
            name
            for (name, info) in Panel.meta.items()
            if info.type == "control" and info.visible
        ]
    ),
)
@click.option(
    "-t",
    "--timeout",
    cls=CeleryOption,
    type=float,
    default=1,
    help_group="Remote Control Options",
    help="Timeout in seconds waiting for reply.",
)
@click.option(
    "-d",
    "--destination",
    cls=CeleryOption,
    type=COMMA_SEPARATED_LIST,
    help_group="Remote Control Options",
    help="Comma separated list of destination node names.",
)
@click.option(
    "-j",
    "--json",
    cls=CeleryOption,
    is_flag=True,
    help_group="Remote Control Options",
    help="Use json as output format.",
)
@click.pass_context
@handle_preload_options
def control(ctx, action, timeout, destination, json):  # -> None:
    """Workers remote control.

    Availability: RabbitMQ (AMQP), Redis, and MongoDB transports.
    """
    ...
