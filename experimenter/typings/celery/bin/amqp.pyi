"""
This type stub file was generated by pyright.
"""

import click
from celery.bin.base import handle_preload_options

"""AMQP 0.9.1 REPL."""
__all__ = ("amqp",)

def dump_message(message): ...

class AMQPContext:
    def __init__(self, cli_context) -> None: ...
    @property
    def app(self): ...
    def respond(self, retval): ...
    def echo_error(self, exception): ...
    def echo_ok(self): ...
    def reconnect(self): ...

@click.group(invoke_without_command=True)
@click.pass_context
@handle_preload_options
def amqp(ctx):  # -> None:
    """AMQP Administration Shell.

    Also works for non-AMQP transports (but not ones that
    store declarations in memory).
    """
    ...

@amqp.command(name="exchange.declare")
@click.argument("exchange", type=str)
@click.argument("type", type=str)
@click.argument("passive", type=bool, default=False)
@click.argument("durable", type=bool, default=False)
@click.argument("auto_delete", type=bool, default=False)
@click.pass_obj
def exchange_declare(amqp_context, exchange, type, passive, durable, auto_delete): ...
@amqp.command(name="exchange.delete")
@click.argument("exchange", type=str)
@click.argument("if_unused", type=bool)
@click.pass_obj
def exchange_delete(amqp_context, exchange, if_unused): ...
@amqp.command(name="queue.bind")
@click.argument("queue", type=str)
@click.argument("exchange", type=str)
@click.argument("routing_key", type=str)
@click.pass_obj
def queue_bind(amqp_context, queue, exchange, routing_key): ...
@amqp.command(name="queue.declare")
@click.argument("queue", type=str)
@click.argument("passive", type=bool, default=False)
@click.argument("durable", type=bool, default=False)
@click.argument("auto_delete", type=bool, default=False)
@click.pass_obj
def queue_declare(amqp_context, queue, passive, durable, auto_delete): ...
@amqp.command(name="queue.delete")
@click.argument("queue", type=str)
@click.argument("if_unused", type=bool, default=False)
@click.argument("if_empty", type=bool, default=False)
@click.pass_obj
def queue_delete(amqp_context, queue, if_unused, if_empty): ...
@amqp.command(name="queue.purge")
@click.argument("queue", type=str)
@click.pass_obj
def queue_purge(amqp_context, queue): ...
@amqp.command(name="basic.get")
@click.argument("queue", type=str)
@click.argument("no_ack", type=bool, default=False)
@click.pass_obj
def basic_get(amqp_context, queue, no_ack): ...
@amqp.command(name="basic.publish")
@click.argument("msg", type=str)
@click.argument("exchange", type=str)
@click.argument("routing_key", type=str)
@click.argument("mandatory", type=bool, default=False)
@click.argument("immediate", type=bool, default=False)
@click.pass_obj
def basic_publish(amqp_context, msg, exchange, routing_key, mandatory, immediate): ...
@amqp.command(name="basic.ack")
@click.argument("delivery_tag", type=int)
@click.pass_obj
def basic_ack(amqp_context, delivery_tag): ...

repl = ...
