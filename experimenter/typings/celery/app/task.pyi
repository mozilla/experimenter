"""
This type stub file was generated by pyright.
"""

from celery.canvas import group
from celery.exceptions import MaxRetriesExceededError
from celery.utils import abstract
from kombu.exceptions import OperationalError

"""Task implementation: request context and the task base class."""
__all__ = ("Context", "Task")
extract_exec_options = ...
R_BOUND_TASK = ...
R_UNBOUND_TASK = ...
R_INSTANCE = ...
TaskType = type

class Context:
    """Task request variables (Task.request)."""

    _children = ...
    _protected = ...
    args = ...
    callbacks = ...
    called_directly = ...
    chain = ...
    chord = ...
    correlation_id = ...
    delivery_info = ...
    errbacks = ...
    eta = ...
    expires = ...
    group = ...
    group_index = ...
    headers = ...
    hostname = ...
    id = ...
    ignore_result = ...
    is_eager = ...
    kwargs = ...
    logfile = ...
    loglevel = ...
    origin = ...
    parent_id = ...
    properties = ...
    retries = ...
    reply_to = ...
    replaced_task_nesting = ...
    root_id = ...
    shadow = ...
    taskset = ...
    timelimit = ...
    utc = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def update(self, *args, **kwargs): ...
    def clear(self): ...
    def get(self, key, default=...): ...
    def __repr__(self): ...
    def as_execution_options(self): ...
    @property
    def children(self): ...

@abstract.CallableTask.register
class Task:
    """Task base class.

    Note:
        When called tasks apply the :meth:`run` method.  This method must
        be defined by all tasks (that is unless the :meth:`__call__` method
        is overridden).
    """

    __trace__ = ...
    __v2_compat__ = ...
    MaxRetriesExceededError = MaxRetriesExceededError
    OperationalError = OperationalError
    Strategy = ...
    Request = ...
    _app = ...
    name = ...
    typing = ...
    max_retries = ...
    default_retry_delay = ...
    rate_limit = ...
    ignore_result = ...
    trail = ...
    send_events = ...
    store_errors_even_if_ignored = ...
    serializer = ...
    time_limit = ...
    soft_time_limit = ...
    backend = ...
    track_started = ...
    acks_late = ...
    acks_on_failure_or_timeout = ...
    reject_on_worker_lost = ...
    throws = ...
    expires = ...
    priority = ...
    resultrepr_maxsize = ...
    request_stack = ...
    _default_request = ...
    abstract = ...
    _exec_options = ...
    __bound__ = ...
    from_config = ...
    _backend = ...
    @classmethod
    def bind(cls, app): ...
    @classmethod
    def on_bound(cls, app):  # -> None:
        """Called when the task is bound to an app.

        Note:
            This class method can be defined to do additional actions when
            the task class is bound to an app.
        """
        ...
    app = ...
    @classmethod
    def annotate(cls): ...
    @classmethod
    def add_around(cls, attr, around): ...
    def __call__(self, *args, **kwargs): ...
    def __reduce__(self): ...
    def run(self, *args, **kwargs):
        """The body of the task executed by workers."""
        ...
    def start_strategy(self, app, consumer, **kwargs): ...
    def delay(self, *args, **kwargs):  # -> EagerResult | Any:
        """Star argument version of :meth:`apply_async`.

        Does not support the extra options enabled by :meth:`apply_async`.

        Arguments:
            *args (Any): Positional arguments passed on to the task.
            **kwargs (Any): Keyword arguments passed on to the task.
        Returns:
            celery.result.AsyncResult: Future promise.
        """
        ...
    def apply_async(
        self,
        args=...,
        kwargs=...,
        task_id=...,
        producer=...,
        link=...,
        link_error=...,
        shadow=...,
        **options
    ):  # -> EagerResult | Any:
        """Apply tasks asynchronously by sending a message.

        Arguments:
            args (Tuple): The positional arguments to pass on to the task.

            kwargs (Dict): The keyword arguments to pass on to the task.

            countdown (float): Number of seconds into the future that the
                task should execute.  Defaults to immediate execution.

            eta (~datetime.datetime): Absolute time and date of when the task
                should be executed.  May not be specified if `countdown`
                is also supplied.

            expires (float, ~datetime.datetime): Datetime or
                seconds in the future for the task should expire.
                The task won't be executed after the expiration time.

            shadow (str): Override task name used in logs/monitoring.
                Default is retrieved from :meth:`shadow_name`.

            connection (kombu.Connection): Re-use existing broker connection
                instead of acquiring one from the connection pool.

            retry (bool): If enabled sending of the task message will be
                retried in the event of connection loss or failure.
                Default is taken from the :setting:`task_publish_retry`
                setting.  Note that you need to handle the
                producer/connection manually for this to work.

            retry_policy (Mapping): Override the retry policy used.
                See the :setting:`task_publish_retry_policy` setting.

            time_limit (int): If set, overrides the default time limit.

            soft_time_limit (int): If set, overrides the default soft
                time limit.

            queue (str, kombu.Queue): The queue to route the task to.
                This must be a key present in :setting:`task_queues`, or
                :setting:`task_create_missing_queues` must be
                enabled.  See :ref:`guide-routing` for more
                information.

            exchange (str, kombu.Exchange): Named custom exchange to send the
                task to.  Usually not used in combination with the ``queue``
                argument.

            routing_key (str): Custom routing key used to route the task to a
                worker server.  If in combination with a ``queue`` argument
                only used to specify custom routing keys to topic exchanges.

            priority (int): The task priority, a number between 0 and 9.
                Defaults to the :attr:`priority` attribute.

            serializer (str): Serialization method to use.
                Can be `pickle`, `json`, `yaml`, `msgpack` or any custom
                serialization method that's been registered
                with :mod:`kombu.serialization.registry`.
                Defaults to the :attr:`serializer` attribute.

            compression (str): Optional compression method
                to use.  Can be one of ``zlib``, ``bzip2``,
                or any custom compression methods registered with
                :func:`kombu.compression.register`.
                Defaults to the :setting:`task_compression` setting.

            link (Signature): A single, or a list of tasks signatures
                to apply if the task returns successfully.

            link_error (Signature): A single, or a list of task signatures
                to apply if an error occurs while executing the task.

            producer (kombu.Producer): custom producer to use when publishing
                the task.

            add_to_parent (bool): If set to True (default) and the task
                is applied while executing another task, then the result
                will be appended to the parent tasks ``request.children``
                attribute.  Trailing can also be disabled by default using the
                :attr:`trail` attribute

            ignore_result (bool): If set to `False` (default) the result
                of a task will be stored in the backend. If set to `True`
                the result will not be stored. This can also be set
                using the :attr:`ignore_result` in the `app.task` decorator.

            publisher (kombu.Producer): Deprecated alias to ``producer``.

            headers (Dict): Message headers to be included in the message.

        Returns:
            celery.result.AsyncResult: Promise of future evaluation.

        Raises:
            TypeError: If not enough arguments are passed, or too many
                arguments are passed.  Note that signature checks may
                be disabled by specifying ``@task(typing=False)``.
            kombu.exceptions.OperationalError: If a connection to the
               transport cannot be made, or if the connection is lost.

        Note:
            Also supports all keyword arguments supported by
            :meth:`kombu.Producer.publish`.
        """
        ...
    def shadow_name(self, args, kwargs, options):  # -> None:
        """Override for custom task name in worker logs/monitoring.

        Example:
            .. code-block:: python

                from celery.utils.imports import qualname

                def shadow_name(task, args, kwargs, options):
                    return qualname(args[0])

                @app.task(shadow_name=shadow_name, serializer='pickle')
                def apply_function_async(fun, *args, **kwargs):
                    return fun(*args, **kwargs)

        Arguments:
            args (Tuple): Task positional arguments.
            kwargs (Dict): Task keyword arguments.
            options (Dict): Task execution options.
        """
        ...
    def signature_from_request(
        self, request=..., args=..., kwargs=..., queue=..., **extra_options
    ): ...
    subtask_from_request = ...
    def retry(
        self,
        args=...,
        kwargs=...,
        exc=...,
        throw=...,
        eta=...,
        countdown=...,
        max_retries=...,
        **options
    ):  # -> Retry:
        """Retry the task, adding it to the back of the queue.

        Example:
            >>> from imaginary_twitter_lib import Twitter
            >>> from proj.celery import app

            >>> @app.task(bind=True)
            ... def tweet(self, auth, message):
            ...     twitter = Twitter(oauth=auth)
            ...     try:
            ...         twitter.post_status_update(message)
            ...     except twitter.FailWhale as exc:
            ...         # Retry in 5 minutes.
            ...         self.retry(countdown=60 * 5, exc=exc)

        Note:
            Although the task will never return above as `retry` raises an
            exception to notify the worker, we use `raise` in front of the
            retry to convey that the rest of the block won't be executed.

        Arguments:
            args (Tuple): Positional arguments to retry with.
            kwargs (Dict): Keyword arguments to retry with.
            exc (Exception): Custom exception to report when the max retry
                limit has been exceeded (default:
                :exc:`~@MaxRetriesExceededError`).

                If this argument is set and retry is called while
                an exception was raised (``sys.exc_info()`` is set)
                it will attempt to re-raise the current exception.

                If no exception was raised it will raise the ``exc``
                argument provided.
            countdown (float): Time in seconds to delay the retry for.
            eta (~datetime.datetime): Explicit time and date to run the
                retry at.
            max_retries (int): If set, overrides the default retry limit for
                this execution.  Changes to this parameter don't propagate to
                subsequent task retry attempts.  A value of :const:`None`,
                means "use the default", so if you want infinite retries you'd
                have to set the :attr:`max_retries` attribute of the task to
                :const:`None` first.
            time_limit (int): If set, overrides the default time limit.
            soft_time_limit (int): If set, overrides the default soft
                time limit.
            throw (bool): If this is :const:`False`, don't raise the
                :exc:`~@Retry` exception, that tells the worker to mark
                the task as being retried.  Note that this means the task
                will be marked as failed if the task raises an exception,
                or successful if it returns after the retry call.
            **options (Any): Extra options to pass on to :meth:`apply_async`.

        Raises:

            celery.exceptions.Retry:
                To tell the worker that the task has been re-sent for retry.
                This always happens, unless the `throw` keyword argument
                has been explicitly set to :const:`False`, and is considered
                normal operation.
        """
        ...
    def apply(
        self,
        args=...,
        kwargs=...,
        link=...,
        link_error=...,
        task_id=...,
        retries=...,
        throw=...,
        logfile=...,
        loglevel=...,
        headers=...,
        **options
    ):  # -> EagerResult:
        """Execute this task locally, by blocking until the task returns.

        Arguments:
            args (Tuple): positional arguments passed on to the task.
            kwargs (Dict): keyword arguments passed on to the task.
            throw (bool): Re-raise task exceptions.
                Defaults to the :setting:`task_eager_propagates` setting.

        Returns:
            celery.result.EagerResult: pre-evaluated result.
        """
        ...
    def AsyncResult(self, task_id, **kwargs):  # -> Any:
        """Get AsyncResult instance for the specified task.

        Arguments:
            task_id (str): Task id to get result for.
        """
        ...
    def signature(self, args=..., *starargs, **starkwargs):  # -> Signature | None:
        """Create signature.

        Returns:
            :class:`~celery.signature`:  object for
                this task, wrapping arguments and execution options
                for a single task invocation.
        """
        ...
    subtask = ...
    def s(self, *args, **kwargs):  # -> Signature | None:
        """Create signature.

        Shortcut for ``.s(*a, **k) -> .signature(a, k)``.
        """
        ...
    def si(self, *args, **kwargs):  # -> Signature | None:
        """Create immutable signature.

        Shortcut for ``.si(*a, **k) -> .signature(a, k, immutable=True)``.
        """
        ...
    def chunks(self, it, n):  # -> chunks:
        """Create a :class:`~celery.canvas.chunks` task for this task."""
        ...
    def map(self, it):  # -> xmap:
        """Create a :class:`~celery.canvas.xmap` task from ``it``."""
        ...
    def starmap(self, it):  # -> xstarmap:
        """Create a :class:`~celery.canvas.xstarmap` task from ``it``."""
        ...
    def send_event(self, type_, retry=..., retry_policy=..., **fields):
        """Send monitoring event message.

        This can be used to add custom event types in :pypi:`Flower`
        and other monitors.

        Arguments:
            type_ (str):  Type of event, e.g. ``"task-failed"``.

        Keyword Arguments:
            retry (bool):  Retry sending the message
                if the connection is lost.  Default is taken from the
                :setting:`task_publish_retry` setting.
            retry_policy (Mapping): Retry settings.  Default is taken
                from the :setting:`task_publish_retry_policy` setting.
            **fields (Any): Map containing information about the event.
                Must be JSON serializable.
        """
        ...
    def replace(self, sig):  # -> Any:
        """Replace this task, with a new task inheriting the task id.

        Execution of the host task ends immediately and no subsequent statements
        will be run.

        .. versionadded:: 4.0

        Arguments:
            sig (Signature): signature to replace with.

        Raises:
            ~@Ignore: This is always raised when called in asynchronous context.
            It is best to always use ``return self.replace(...)`` to convey
            to the reader that the task won't continue after being replaced.
        """
        ...
    def add_to_chord(self, sig, lazy=...):
        """Add signature to the chord the current task is a member of.

        .. versionadded:: 4.0

        Currently only supported by the Redis result backend.

        Arguments:
            sig (Signature): Signature to extend chord with.
            lazy (bool): If enabled the new task won't actually be called,
                and ``sig.delay()`` must be called manually.
        """
        ...
    def update_state(self, task_id=..., state=..., meta=..., **kwargs):  # -> None:
        """Update task state.

        Arguments:
            task_id (str): Id of the task to update.
                Defaults to the id of the current task.
            state (str): New state.
            meta (Dict): State meta-data.
        """
        ...
    def before_start(self, task_id, args, kwargs):  # -> None:
        """Handler called before the task starts.

        .. versionadded:: 5.2

        Arguments:
            task_id (str): Unique id of the task to execute.
            args (Tuple): Original arguments for the task to execute.
            kwargs (Dict): Original keyword arguments for the task to execute.

        Returns:
            None: The return value of this handler is ignored.
        """
        ...
    def on_success(self, retval, task_id, args, kwargs):  # -> None:
        """Success handler.

        Run by the worker if the task executes successfully.

        Arguments:
            retval (Any): The return value of the task.
            task_id (str): Unique id of the executed task.
            args (Tuple): Original arguments for the executed task.
            kwargs (Dict): Original keyword arguments for the executed task.

        Returns:
            None: The return value of this handler is ignored.
        """
        ...
    def on_retry(self, exc, task_id, args, kwargs, einfo):  # -> None:
        """Retry handler.

        This is run by the worker when the task is to be retried.

        Arguments:
            exc (Exception): The exception sent to :meth:`retry`.
            task_id (str): Unique id of the retried task.
            args (Tuple): Original arguments for the retried task.
            kwargs (Dict): Original keyword arguments for the retried task.
            einfo (~billiard.einfo.ExceptionInfo): Exception information.

        Returns:
            None: The return value of this handler is ignored.
        """
        ...
    def on_failure(self, exc, task_id, args, kwargs, einfo):  # -> None:
        """Error handler.

        This is run by the worker when the task fails.

        Arguments:
            exc (Exception): The exception raised by the task.
            task_id (str): Unique id of the failed task.
            args (Tuple): Original arguments for the task that failed.
            kwargs (Dict): Original keyword arguments for the task that failed.
            einfo (~billiard.einfo.ExceptionInfo): Exception information.

        Returns:
            None: The return value of this handler is ignored.
        """
        ...
    def after_return(self, status, retval, task_id, args, kwargs, einfo):  # -> None:
        """Handler called after the task returns.

        Arguments:
            status (str): Current task state.
            retval (Any): Task return value/exception.
            task_id (str): Unique id of the task.
            args (Tuple): Original arguments for the task.
            kwargs (Dict): Original keyword arguments for the task.
            einfo (~billiard.einfo.ExceptionInfo): Exception information.

        Returns:
            None: The return value of this handler is ignored.
        """
        ...
    def add_trail(self, result): ...
    def push_request(self, *args, **kwargs): ...
    def pop_request(self): ...
    def __repr__(self):  # -> str:
        """``repr(task)``."""
        ...
    request = ...
    @property
    def backend(self): ...
    @backend.setter
    def backend(self, value): ...
    @property
    def __name__(self): ...

BaseTask = Task
