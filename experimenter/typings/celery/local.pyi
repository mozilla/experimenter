"""
This type stub file was generated by pyright.
"""

from types import ModuleType

"""Proxy/PromiseProxy implementation.

This module contains critical utilities that needs to be loaded as
soon as possible, and that shall not load any third party modules.

Parts of this module is Copyright by Werkzeug Team.
"""
__all__ = ("Proxy", "PromiseProxy", "try_import", "maybe_evaluate")
__module__ = ...

def try_import(module, default=...):  # -> ModuleType | None:
    """Try to import and return module.

    Returns None if the module does not exist.
    """
    ...

class Proxy:
    """Proxy to another object."""

    __slots__ = ...
    def __init__(self, local, args=..., kwargs=..., name=..., __doc__=...) -> None: ...
    @_default_cls_attr("name", str, __name__)
    def __name__(self): ...
    @_default_cls_attr("qualname", str, __name__)
    def __qualname__(self): ...
    @_default_cls_attr("module", str, __module__)
    def __module__(self): ...
    @_default_cls_attr("doc", str, __doc__)
    def __doc__(self): ...
    @property
    def __class__(self): ...
    @property
    def __dict__(self): ...
    def __repr__(self): ...
    def __bool__(self): ...
    __nonzero__ = ...
    def __dir__(self): ...
    def __getattr__(self, name): ...
    def __setitem__(self, key, value): ...
    def __delitem__(self, key): ...
    def __setslice__(self, i, j, seq): ...
    def __delslice__(self, i, j): ...
    def __setattr__(self, name, value): ...
    def __delattr__(self, name): ...
    def __str__(self) -> str: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __call__(self, *a, **kw): ...
    def __len__(self): ...
    def __getitem__(self, i): ...
    def __iter__(self): ...
    def __contains__(self, i): ...
    def __getslice__(self, i, j): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __floordiv__(self, other): ...
    def __mod__(self, other): ...
    def __divmod__(self, other): ...
    def __pow__(self, other): ...
    def __lshift__(self, other): ...
    def __rshift__(self, other): ...
    def __and__(self, other): ...
    def __xor__(self, other): ...
    def __or__(self, other): ...
    def __div__(self, other): ...
    def __truediv__(self, other): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __complex__(self): ...
    def __int__(self) -> int: ...
    def __float__(self): ...
    def __oct__(self): ...
    def __hex__(self): ...
    def __index__(self): ...
    def __coerce__(self, other): ...
    def __enter__(self): ...
    def __exit__(self, *a, **kw): ...
    def __reduce__(self): ...

class PromiseProxy(Proxy):
    """Proxy that evaluates object once.

    :class:`Proxy` will evaluate the object each time, while the
    promise will only evaluate it once.
    """

    __slots__ = ...
    def __then__(self, fun, *args, **kwargs): ...
    def __evaluated__(self): ...
    def __maybe_evaluate__(self): ...
    def __evaluate__(self, _clean=...): ...

def maybe_evaluate(obj):
    """Attempt to evaluate promise, even if obj is not a promise."""
    ...

MODULE_DEPRECATED = ...
DEFAULT_ATTRS = ...

def fun_of_method(method): ...
def getappattr(path):  # -> Any:
    """Get attribute from current_app recursively.

    Example: ``getappattr('amqp.get_task_consumer')``.

    """
    ...

COMPAT_MODULES = ...
DEPRECATED_ATTRS = ...

class class_property:
    def __init__(self, getter=..., setter=...) -> None: ...
    def __get__(self, obj, type=...): ...
    def __set__(self, obj, value): ...
    def setter(self, setter): ...

def reclassmethod(method): ...

class LazyModule(ModuleType):
    _compat_modules = ...
    _all_by_module = ...
    _direct = ...
    _object_origins = ...
    def __getattr__(self, name): ...
    def __dir__(self): ...
    def __reduce__(self): ...

def create_module(name, attrs, cls_attrs=..., pkg=..., base=..., prepare_attr=...): ...
def recreate_module(
    name, compat_modules=..., by_module=..., direct=..., base=..., **attrs
): ...
def get_compat_module(pkg, name): ...
def get_origins(defs): ...
