"""
This type stub file was generated by pyright.
"""

import os
import threading

"""Internal state.

This is an internal module containing thread state
like the ``current_app``, and ``current_task``.

This module shouldn't be used directly.
"""
__all__ = (
    "set_default_app",
    "get_current_app",
    "get_current_task",
    "get_current_worker_task",
    "current_app",
    "current_task",
    "connect_on_app_finalize",
)
default_app = ...
app_or_default = ...
_apps = ...
_on_app_finalizers = ...
_task_join_will_block = ...

def connect_on_app_finalize(callback):
    """Connect callback to be called when any app is finalized."""
    ...

def task_join_will_block(): ...

class _TLS(threading.local):
    current_app = ...

_tls = ...
_task_stack = ...
push_current_task = ...
pop_current_task = ...

def set_default_app(app):  # -> None:
    """Set default app."""
    ...

if os.environ.get("C_STRICT_APP"):
    def get_current_app():
        """Return the current app."""
        ...

else:
    def get_current_app(): ...
    get_current_app = ...

def get_current_task():  # -> None:
    """Currently executing task."""
    ...

def get_current_worker_task():  # -> None:
    """Currently executing task, that was applied by the worker.

    This is used to differentiate between the actual task
    executed by the worker and any task that was called within
    a task (using ``task.__call__`` or ``task.apply``)
    """
    ...

current_app = ...
current_task = ...

def enable_trace():  # -> None:
    """Enable tracing of app instances."""
    ...

def disable_trace():  # -> None:
    """Disable tracing of app instances."""
    ...

if os.environ.get("CELERY_TRACE_APP"): ...
else: ...
