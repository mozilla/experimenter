"""
This type stub file was generated by pyright.
"""

import six
from graphene.utils.subclass_with_meta import SubclassWithMeta_Meta

from .base import BaseOptions, BaseType
from .unmountedtype import UnmountedType

def eq_enum(self, other): ...

EnumType = ...

class EnumOptions(BaseOptions):
    enum: Enum = ...
    deprecation_reason = ...

class EnumMeta(SubclassWithMeta_Meta):
    def __new__(cls, name, bases, classdict, **options): ...
    def get(cls, value): ...
    def __getitem__(cls, value): ...
    def __prepare__(name, bases, **kwargs): ...
    def __call__(cls, *args, **kwargs): ...
    def from_enum(cls, enum, description=..., deprecation_reason=...): ...

class Enum(six.with_metaclass(EnumMeta, UnmountedType, BaseType)):
    """
    Enum type definition

    Defines a static set of values that can be provided as a Field, Argument or InputField.

    .. code:: python

        from graphene import Enum

        class NameFormat(Enum):
            FIRST_LAST = "first_last"
            LAST_FIRST = "last_first"

    Meta:
        enum (optional, Enum): Python enum to use as a base for GraphQL Enum.

        name (optional, str): Name of the GraphQL type (must be unique in schema). Defaults to class
            name.
        description (optional, str): Description of the GraphQL type in the schema. Defaults to class
            docstring.
        deprecation_reason (optional, str): Setting this value indicates that the enum is
            depreciated and may provide instruction or reason on how for clients to proceed.
    """

    @classmethod
    def __init_subclass_with_meta__(cls, enum=..., _meta=..., **options): ...
    @classmethod
    def get_type(cls):  # -> Type[Self@Enum]:
        """
        This function is called when the unmounted type (Enum instance)
        is mounted (as a Field, InputField or Argument)
        """
        ...
