type Query {
  """List Nimbus Experiments."""
  experiments: [NimbusExperimentType]

  """Retrieve a Nimbus experiment by its slug."""
  experimentBySlug(slug: String!): NimbusExperimentType

  """List Nimbus Experiments by application."""
  experimentsByApplication(application: NimbusExperimentApplicationEnum!): [NimbusExperimentType!]!

  """Nimbus Configuration Data for front-end usage."""
  nimbusConfig: NimbusConfigurationType
}

type NimbusExperimentType {
  id: Int!
  parent: NimbusExperimentType
  isRollout: Boolean
  isArchived: Boolean
  owner: NimbusUserType!
  status: NimbusExperimentStatusEnum
  statusNext: NimbusExperimentStatusEnum
  publishStatus: NimbusExperimentPublishStatusEnum
  name: String!
  slug: String!
  publicDescription: String
  riskMitigationLink: String
  isRolloutDirty: Boolean!
  proposedDuration: Int!
  proposedEnrollment: Int!
  populationPercent: String
  totalEnrolledClients: Int!
  firefoxMinVersion: NimbusExperimentFirefoxVersionEnum
  firefoxMaxVersion: NimbusExperimentFirefoxVersionEnum
  application: NimbusExperimentApplicationEnum
  channel: NimbusExperimentChannelEnum
  locales: [NimbusLocaleType!]!
  countries: [NimbusCountryType!]!
  languages: [NimbusLanguageType!]!
  isSticky: Boolean
  projects: [NimbusProjectType]
  hypothesis: String
  primaryOutcomes: [String]
  secondaryOutcomes: [String]
  featureConfigs: [NimbusFeatureConfigType!]
  warnFeatureSchema: Boolean
  targetingConfigSlug: String
  referenceBranch: NimbusBranchType
  riskPartnerRelated: Boolean
  riskRevenue: Boolean
  riskBrand: Boolean
  conclusionRecommendation: NimbusExperimentConclusionRecommendationEnum
  takeawaysMetricGain: Boolean!
  takeawaysGainAmount: String
  takeawaysQbrLearning: Boolean!
  takeawaysSummary: String
  isFirstRun: Boolean!
  preventPrefConflicts: Boolean
  proposedReleaseDate: String
  isLocalized: Boolean
  localizations: String
  qaStatus: NimbusExperimentQAStatusEnum
  qaComment: String
  documentationLinks: [NimbusDocumentationLinkType!]
  changes: [NimbusChangeLogType]
  canArchive: Boolean
  canEdit: Boolean
  canReview: Boolean
  computedDurationDays: Int
  computedEndDate: DateTime
  computedEnrollmentDays: Int
  computedEnrollmentEndDate: DateTime
  enrollmentEndDate: DateTime
  excludedExperiments: [NimbusExperimentType!]!
  excludedExperimentsBranches: [NimbusExperimentBranchThroughExcludedType!]!
  isEnrollmentPausePending: Boolean
  isEnrollmentPaused: Boolean
  isWeb: Boolean!
  jexlTargetingExpression: String
  monitoringDashboardUrl: String
  readyForReview: NimbusReviewType
  recipeJson: String
  rejection: NimbusChangeLogType
  requiredExperiments: [NimbusExperimentType!]!
  requiredExperimentsBranches: [NimbusExperimentBranchThroughRequiredType!]!
  resultsExpectedDate: DateTime
  resultsReady: Boolean
  reviewRequest: NimbusChangeLogType
  reviewUrl: String
  rolloutMonitoringDashboardUrl: String
  showResultsUrl: Boolean
  signoffRecommendations: NimbusSignoffRecommendationsType
  startDate: DateTime
  targetingConfig: [NimbusExperimentTargetingConfigType]
  timeout: NimbusChangeLogType
  treatmentBranches: [NimbusBranchType]
}

type NimbusUserType {
  id: ID!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

enum NimbusExperimentStatusEnum {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

enum NimbusExperimentPublishStatusEnum {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusExperimentFirefoxVersionEnum {
  NO_VERSION
  FIREFOX_11
  FIREFOX_12
  FIREFOX_13
  FIREFOX_14
  FIREFOX_15
  FIREFOX_16
  FIREFOX_17
  FIREFOX_18
  FIREFOX_19
  FIREFOX_20
  FIREFOX_21
  FIREFOX_22
  FIREFOX_23
  FIREFOX_24
  FIREFOX_25
  FIREFOX_26
  FIREFOX_27
  FIREFOX_28
  FIREFOX_29
  FIREFOX_30
  FIREFOX_31
  FIREFOX_32
  FIREFOX_33
  FIREFOX_34
  FIREFOX_35
  FIREFOX_36
  FIREFOX_37
  FIREFOX_38
  FIREFOX_39
  FIREFOX_40
  FIREFOX_41
  FIREFOX_42
  FIREFOX_43
  FIREFOX_44
  FIREFOX_45
  FIREFOX_46
  FIREFOX_47
  FIREFOX_48
  FIREFOX_49
  FIREFOX_50
  FIREFOX_51
  FIREFOX_52
  FIREFOX_53
  FIREFOX_54
  FIREFOX_55
  FIREFOX_56
  FIREFOX_57
  FIREFOX_58
  FIREFOX_59
  FIREFOX_60
  FIREFOX_61
  FIREFOX_62
  FIREFOX_63
  FIREFOX_64
  FIREFOX_65
  FIREFOX_66
  FIREFOX_67
  FIREFOX_68
  FIREFOX_69
  FIREFOX_70
  FIREFOX_71
  FIREFOX_72
  FIREFOX_73
  FIREFOX_74
  FIREFOX_75
  FIREFOX_76
  FIREFOX_77
  FIREFOX_78
  FIREFOX_79
  FIREFOX_80
  FIREFOX_81
  FIREFOX_82
  FIREFOX_83
  FIREFOX_84
  FIREFOX_85
  FIREFOX_86
  FIREFOX_87
  FIREFOX_88
  FIREFOX_89
  FIREFOX_90
  FIREFOX_91
  FIREFOX_92
  FIREFOX_9201
  FIREFOX_93
  FIREFOX_94
  FIREFOX_95
  FIREFOX_96
  FIREFOX_9601
  FIREFOX_9602
  FIREFOX_97
  FIREFOX_98
  FIREFOX_9830
  FIREFOX_99
  FIREFOX_9910
  FIREFOX_100
  FIREFOX_101
  FIREFOX_102
  FIREFOX_103
  FIREFOX_10301
  FIREFOX_104
  FIREFOX_105
  FIREFOX_10501
  FIREFOX_10502
  FIREFOX_10503
  FIREFOX_106
  FIREFOX_10601
  FIREFOX_10602
  FIREFOX_107
  FIREFOX_108
  FIREFOX_109
  FIREFOX_110
  FIREFOX_111
  FIREFOX_111_0_1
  FIREFOX_112
  FIREFOX_113
  FIREFOX_113_0_1
  FIREFOX_114
  FIREFOX_114_3_0
  FIREFOX_115
  FIREFOX_115_0_2
  FIREFOX_116
  FIREFOX_116_0_1
  FIREFOX_116_2_0
  FIREFOX_116_3_0
  FIREFOX_117
  FIREFOX_118
  FIREFOX_118_0_1
  FIREFOX_118_0_2
  FIREFOX_119
  FIREFOX_120
  FIREFOX_121
  FIREFOX_121_0_1
  FIREFOX_122
  FIREFOX_123
  FIREFOX_124
  FIREFOX_125
  FIREFOX_126
  FIREFOX_127
  FIREFOX_128
  FIREFOX_129
  FIREFOX_130
  FIREFOX_131
  FIREFOX_132
  FIREFOX_133
  FIREFOX_134
  FIREFOX_135
  FIREFOX_136
  FIREFOX_137
  FIREFOX_138
  FIREFOX_139
  FIREFOX_140
}

enum NimbusExperimentApplicationEnum {
  DESKTOP
  FENIX
  IOS
  FOCUS_ANDROID
  KLAR_ANDROID
  FOCUS_IOS
  KLAR_IOS
  MONITOR
  VPN
  DEMO_APP
}

enum NimbusExperimentChannelEnum {
  NO_CHANNEL
  UNBRANDED
  NIGHTLY
  BETA
  RELEASE
  ESR
  TESTFLIGHT
  AURORA
  DEVELOPER
  STAGING
  PRODUCTION
}

type NimbusLocaleType {
  id: String!
  code: String!
  name: String!
}

type NimbusCountryType {
  id: String!
  code: String!
  name: String!
}

type NimbusLanguageType {
  id: String!
  code: String!
  name: String!
}

type NimbusProjectType {
  id: String
  name: String
  slug: String
  nimbusexperimentSet: [NimbusExperimentType!]!
}

type NimbusFeatureConfigType {
  id: Int
  name: String!
  slug: String!
  description: String
  application: NimbusExperimentApplicationEnum
  ownerEmail: String
  enabled: Boolean!
  setsPrefs: Boolean
  schema: String
}

type NimbusBranchType {
  id: Int
  name: String!
  slug: String!
  description: String!
  ratio: Int!
  featureValues: [NimbusBranchFeatureValueType]
  screenshots: [NimbusBranchScreenshotType!]
}

type NimbusBranchFeatureValueType {
  id: Int
  featureConfig: NimbusFeatureConfigType
  value: String
}

type NimbusBranchScreenshotType {
  id: Int
  image: String
  description: String
}

enum NimbusExperimentConclusionRecommendationEnum {
  RERUN
  GRADUATE
  CHANGE_COURSE
  STOP
  FOLLOWUP
}

enum NimbusExperimentQAStatusEnum {
  RED
  YELLOW
  GREEN
  NOT_SET
}

type NimbusDocumentationLinkType {
  title: NimbusExperimentDocumentationLinkEnum
  link: String!
}

enum NimbusExperimentDocumentationLinkEnum {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
  QA_TICKET
}

type NimbusChangeLogType {
  changedOn: DateTime!
  changedBy: NimbusUserType!
  oldStatus: NimbusExperimentStatusEnum
  oldStatusNext: NimbusExperimentStatusEnum
  newStatus: NimbusExperimentStatusEnum
  newStatusNext: NimbusExperimentStatusEnum
  message: String
  experimentData: JSONString
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type NimbusExperimentBranchThroughExcludedType {
  branchSlug: String
  excludedExperiment: NimbusExperimentType!
}

type NimbusReviewType {
  message: ObjectField
  warnings: ObjectField
  ready: Boolean
}

"""Utilized to serialize out Serializer errors"""
scalar ObjectField

type NimbusExperimentBranchThroughRequiredType {
  branchSlug: String
  requiredExperiment: NimbusExperimentType!
}

type NimbusSignoffRecommendationsType {
  qaSignoff: Boolean
  vpSignoff: Boolean
  legalSignoff: Boolean
}

type NimbusExperimentTargetingConfigType {
  label: String
  value: String
  applicationValues: [String]
  description: String
  stickyRequired: Boolean
  isFirstRunRequired: Boolean
}

type NimbusConfigurationType {
  applicationConfigs: [NimbusExperimentApplicationConfigType]
  applications: [NimbusLabelValueType]
  channels: [NimbusLabelValueType]
  countries: [NimbusCountryType]
  documentationLink: [NimbusLabelValueType]
  allFeatureConfigs: [NimbusFeatureConfigType!]
  firefoxVersions: [NimbusLabelValueType]
  hypothesisDefault: String
  locales: [NimbusLocaleType]
  languages: [NimbusLanguageType]
  projects: [NimbusProjectType]
  maxPrimaryOutcomes: Int
  outcomes: [NimbusOutcomeType]
  owners: [NimbusUserType]
  targetingConfigs: [NimbusExperimentTargetingConfigType]
  conclusionRecommendations: [NimbusLabelValueType]
  takeaways: [NimbusLabelValueType]
  types: [NimbusLabelValueType]
  statusUpdateExemptFields: [NimbusStatusUpdateExemptFieldsType]
  populationSizingData: String
  qaStatus: [NimbusLabelValueType]
}

type NimbusExperimentApplicationConfigType {
  application: NimbusExperimentApplicationEnum
  channels: [NimbusLabelValueType]
}

type NimbusLabelValueType {
  label: String
  value: String
}

type NimbusOutcomeType {
  friendlyName: String
  slug: String
  application: NimbusExperimentApplicationEnum
  description: String
  isDefault: Boolean
  metrics: [NimbusOutcomeMetricType]
}

type NimbusOutcomeMetricType {
  slug: String
  friendlyName: String
  description: String
}

type NimbusStatusUpdateExemptFieldsType {
  all: [String]
  experiments: [String]
  rollouts: [String]
}

type Mutation {
  """Create a new Nimbus Experiment."""
  createExperiment(input: ExperimentInput!): CreateExperiment

  """Update a Nimbus Experiment."""
  updateExperiment(input: ExperimentInput!): UpdateExperiment

  """Clone an experiment."""
  cloneExperiment(input: ExperimentCloneInput!): CloneExperiment
}

type CreateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

input ExperimentInput {
  application: NimbusExperimentApplicationEnum
  changelogMessage: String
  channel: NimbusExperimentChannelEnum
  conclusionRecommendation: NimbusExperimentConclusionRecommendationEnum
  countries: [String]
  documentationLinks: [DocumentationLinkInput]
  excludedExperiments: [Int!]
  excludedExperimentsBranches: [NimbusExperimentBranchThroughExcludedInput!]
  featureConfigIds: [Int]
  firefoxMaxVersion: NimbusExperimentFirefoxVersionEnum
  firefoxMinVersion: NimbusExperimentFirefoxVersionEnum
  hypothesis: String
  id: Int
  isArchived: Boolean
  isEnrollmentPaused: Boolean
  isFirstRun: Boolean
  isLocalized: Boolean
  isRollout: Boolean
  isSticky: Boolean
  languages: [String]
  locales: [String]
  localizations: String
  name: String
  populationPercent: String
  preventPrefConflicts: Boolean
  primaryOutcomes: [String]
  projects: [String]
  proposedDuration: String
  proposedEnrollment: String
  proposedReleaseDate: String
  publicDescription: String
  publishStatus: NimbusExperimentPublishStatusEnum
  qaComment: String
  qaStatus: NimbusExperimentQAStatusEnum
  referenceBranch: BranchInput = null
  requiredExperiments: [Int!]
  requiredExperimentsBranches: [NimbusExperimentBranchThroughRequiredInput!]
  riskBrand: Boolean
  riskMitigationLink: String
  riskPartnerRelated: Boolean
  riskRevenue: Boolean
  secondaryOutcomes: [String]
  status: NimbusExperimentStatusEnum
  statusNext: NimbusExperimentStatusEnum
  takeawaysMetricGain: Boolean
  takeawaysGainAmount: String
  takeawaysQbrLearning: Boolean
  takeawaysSummary: String
  targetingConfigSlug: String
  totalEnrolledClients: Int
  treatmentBranches: [BranchInput]
  warnFeatureSchema: Boolean
}

input DocumentationLinkInput {
  title: NimbusExperimentDocumentationLinkEnum!
  link: String!
}

input NimbusExperimentBranchThroughExcludedInput {
  excludedExperiment: Int!
  branchSlug: String
}

input BranchInput {
  id: Int
  name: String!
  description: String!
  ratio: Int!
  featureValues: [BranchFeatureValueInput]
  screenshots: [BranchScreenshotInput]
}

input BranchFeatureValueInput {
  featureConfig: String
  value: String
}

input BranchScreenshotInput {
  id: Int
  image: Upload
  description: String
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

input NimbusExperimentBranchThroughRequiredInput {
  requiredExperiment: Int!
  branchSlug: String
}

type UpdateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

type CloneExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

input ExperimentCloneInput {
  parentSlug: String!
  name: String!
  rolloutBranchSlug: String
}