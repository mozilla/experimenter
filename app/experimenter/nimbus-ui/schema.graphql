schema {
  query: Query
  mutation: Mutation
}

input BranchFeatureValueInput {
  featureConfig: Int
  enabled: Boolean
  value: String
}

input BranchScreenshotInput {
  id: Int
  image: Upload
  description: String
}

type CloneExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

type CreateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

scalar DateTime

input DocumentationLinkInput {
  title: NimbusExperimentDocumentationLinkEnum!
  link: String!
}

input ExperimentCloneInput {
  parentSlug: String!
  name: String!
  rolloutBranchSlug: String
}

input ExperimentInput {
  id: Int
  isArchived: Boolean
  status: NimbusExperimentStatusEnum
  statusNext: NimbusExperimentStatusEnum
  publishStatus: NimbusExperimentPublishStatusEnum
  name: String
  hypothesis: String
  application: NimbusExperimentApplicationEnum
  publicDescription: String
  isEnrollmentPaused: Boolean
  riskMitigationLink: String
  featureConfigId: Int
  featureConfigIds: [Int]
  warnFeatureSchema: Boolean
  documentationLinks: [DocumentationLinkInput]
  referenceBranch: ReferenceBranchInput
  treatmentBranches: [TreatmentBranchInput]
  primaryOutcomes: [String]
  secondaryOutcomes: [String]
  channel: NimbusExperimentChannelEnum
  firefoxMinVersion: NimbusExperimentFirefoxVersionEnum
  firefoxMaxVersion: NimbusExperimentFirefoxVersionEnum
  populationPercent: String
  proposedDuration: Int
  proposedEnrollment: String
  targetingConfigSlug: String
  totalEnrolledClients: Int
  changelogMessage: String
  riskPartnerRelated: Boolean
  riskRevenue: Boolean
  riskBrand: Boolean
  countries: [Int]
  locales: [Int]
  conclusionRecommendation: NimbusExperimentConclusionRecommendationEnum
  takeawaysSummary: String
}

scalar JSONString

type Mutation {
  createExperiment(input: ExperimentInput!): CreateExperiment
  updateExperiment(input: ExperimentInput!): UpdateExperiment
  cloneExperiment(input: ExperimentCloneInput!): CloneExperiment
}

type NimbusBranchFeatureValueType {
  id: Int
  branch: NimbusBranchType!
  featureConfig: NimbusFeatureConfigType
  enabled: Boolean
  value: String
}

type NimbusBranchScreenshotType {
  id: Int
  branch: NimbusBranchType!
  image: String
  description: String
}

type NimbusBranchType {
  id: Int
  name: String!
  slug: String!
  description: String!
  ratio: Int!
  featureValues: [NimbusBranchFeatureValueType]
  screenshots: [NimbusBranchScreenshotType!]
  featureEnabled: Boolean!
  featureValue: String
}

type NimbusBucketRangeType {
  isolationGroup: NimbusIsolationGroupType!
  start: Int!
  count: Int!
}

enum NimbusChangeLogNewPublishStatus {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusChangeLogNewStatus {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

enum NimbusChangeLogNewStatusNext {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

enum NimbusChangeLogOldPublishStatus {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusChangeLogOldStatus {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

enum NimbusChangeLogOldStatusNext {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

type NimbusChangeLogType {
  experiment: NimbusExperimentType!
  changedOn: DateTime!
  changedBy: NimbusUserType!
  oldStatus: NimbusChangeLogOldStatus
  oldStatusNext: NimbusChangeLogOldStatusNext
  oldPublishStatus: NimbusChangeLogOldPublishStatus
  newStatus: NimbusChangeLogNewStatus!
  newStatusNext: NimbusChangeLogNewStatusNext
  newPublishStatus: NimbusChangeLogNewPublishStatus!
  message: String
  experimentData: JSONString
  publishedDtoChanged: Boolean!
}

type NimbusConfigurationType {
  applicationConfigs: [NimbusExperimentApplicationConfigType]
  applications: [NimbusLabelValueType]
  channels: [NimbusLabelValueType]
  countries: [NimbusCountryType]
  documentationLink: [NimbusLabelValueType]
  allFeatureConfigs: [NimbusFeatureConfigType]
  firefoxVersions: [NimbusLabelValueType]
  hypothesisDefault: String
  locales: [NimbusLocaleType]
  maxPrimaryOutcomes: Int
  outcomes: [NimbusOutcomeType]
  owners: [NimbusUserType]
  targetingConfigs: [NimbusExperimentTargetingConfigType]
  conclusionRecommendations: [NimbusLabelValueType]
}

type NimbusCountryType {
  id: Int
  code: String
  name: String
  nimbusexperimentSet: [NimbusExperimentType!]!
}

enum NimbusDocumentationLinkTitle {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
}

type NimbusDocumentationLinkType {
  title: NimbusDocumentationLinkTitle!
  link: String!
}

type NimbusExperimentApplicationConfigType {
  application: NimbusExperimentApplicationEnum
  channels: [NimbusLabelValueType]
}

enum NimbusExperimentApplicationEnum {
  DESKTOP
  FENIX
  IOS
  FOCUS_ANDROID
  KLAR_ANDROID
  FOCUS_IOS
  KLAR_IOS
}

enum NimbusExperimentChannelEnum {
  NO_CHANNEL
  UNBRANDED
  NIGHTLY
  BETA
  RELEASE
  TESTFLIGHT
}

enum NimbusExperimentConclusionRecommendationEnum {
  RERUN
  GRADUATE
  CHANGE_COURSE
  STOP
  FOLLOWUP
}

enum NimbusExperimentDocumentationLinkEnum {
  DS_JIRA
  DESIGN_DOC
  ENG_TICKET
}

enum NimbusExperimentFirefoxVersionEnum {
  NO_VERSION
  FIREFOX_11
  FIREFOX_12
  FIREFOX_13
  FIREFOX_14
  FIREFOX_15
  FIREFOX_16
  FIREFOX_17
  FIREFOX_18
  FIREFOX_19
  FIREFOX_20
  FIREFOX_21
  FIREFOX_22
  FIREFOX_23
  FIREFOX_24
  FIREFOX_25
  FIREFOX_26
  FIREFOX_27
  FIREFOX_28
  FIREFOX_29
  FIREFOX_30
  FIREFOX_31
  FIREFOX_32
  FIREFOX_33
  FIREFOX_34
  FIREFOX_35
  FIREFOX_36
  FIREFOX_37
  FIREFOX_38
  FIREFOX_39
  FIREFOX_40
  FIREFOX_41
  FIREFOX_42
  FIREFOX_43
  FIREFOX_44
  FIREFOX_45
  FIREFOX_46
  FIREFOX_47
  FIREFOX_48
  FIREFOX_49
  FIREFOX_50
  FIREFOX_51
  FIREFOX_52
  FIREFOX_53
  FIREFOX_54
  FIREFOX_55
  FIREFOX_56
  FIREFOX_57
  FIREFOX_58
  FIREFOX_59
  FIREFOX_60
  FIREFOX_61
  FIREFOX_62
  FIREFOX_63
  FIREFOX_64
  FIREFOX_65
  FIREFOX_66
  FIREFOX_67
  FIREFOX_68
  FIREFOX_69
  FIREFOX_70
  FIREFOX_71
  FIREFOX_72
  FIREFOX_73
  FIREFOX_74
  FIREFOX_75
  FIREFOX_76
  FIREFOX_77
  FIREFOX_78
  FIREFOX_79
  FIREFOX_80
  FIREFOX_81
  FIREFOX_82
  FIREFOX_83
  FIREFOX_84
  FIREFOX_85
  FIREFOX_86
  FIREFOX_87
  FIREFOX_88
  FIREFOX_89
  FIREFOX_90
  FIREFOX_91
  FIREFOX_92
  FIREFOX_9201
  FIREFOX_93
  FIREFOX_94
  FIREFOX_95
  FIREFOX_96
  FIREFOX_9601
  FIREFOX_9602
  FIREFOX_97
  FIREFOX_98
  FIREFOX_9830
  FIREFOX_99
  FIREFOX_9910
  FIREFOX_100
  FIREFOX_101
  FIREFOX_102
  FIREFOX_103
  FIREFOX_104
  FIREFOX_105
  FIREFOX_106
  FIREFOX_107
  FIREFOX_108
  FIREFOX_109
  FIREFOX_110
  FIREFOX_111
  FIREFOX_112
  FIREFOX_113
  FIREFOX_114
  FIREFOX_115
  FIREFOX_116
  FIREFOX_117
  FIREFOX_118
  FIREFOX_119
  FIREFOX_120
}

enum NimbusExperimentPublishStatusEnum {
  IDLE
  REVIEW
  APPROVED
  WAITING
}

enum NimbusExperimentStatusEnum {
  DRAFT
  PREVIEW
  LIVE
  COMPLETE
}

type NimbusExperimentTargetingConfigType {
  label: String
  value: String
  applicationValues: [String]
  description: String
}

type NimbusExperimentType {
  id: Int
  parent: NimbusExperimentType
  isRollout: Boolean
  isArchived: Boolean
  owner: NimbusUserType!
  status: NimbusExperimentStatusEnum
  statusNext: NimbusExperimentStatusEnum
  publishStatus: NimbusExperimentPublishStatusEnum
  name: String!
  slug: String!
  publicDescription: String!
  riskMitigationLink: String!
  isPaused: Boolean!
  proposedDuration: Int!
  proposedEnrollment: Int!
  populationPercent: String
  totalEnrolledClients: Int!
  firefoxMinVersion: NimbusExperimentFirefoxVersionEnum
  firefoxMaxVersion: NimbusExperimentFirefoxVersionEnum
  application: NimbusExperimentApplicationEnum
  channel: NimbusExperimentChannelEnum
  locales: [NimbusLocaleType!]!
  countries: [NimbusCountryType!]!
  projects: [ProjectType!]!
  hypothesis: String!
  primaryOutcomes: [String]
  secondaryOutcomes: [String]
  warnFeatureSchema: Boolean
  targetingConfigSlug: String
  referenceBranch: NimbusBranchType
  publishedDto: JSONString
  resultsData: JSONString
  riskPartnerRelated: Boolean
  riskRevenue: Boolean
  riskBrand: Boolean
  conclusionRecommendation: NimbusExperimentConclusionRecommendationEnum
  takeawaysSummary: String
  nimbusexperimentSet: [NimbusExperimentType!]!
  documentationLinks: [NimbusDocumentationLinkType!]
  bucketRange: NimbusBucketRangeType
  changes: [NimbusChangeLogType!]!
  treatmentBranches: [NimbusBranchType]
  targetingConfig: [NimbusExperimentTargetingConfigType]
  jexlTargetingExpression: String
  featureConfig: NimbusFeatureConfigType
  featureConfigs: [NimbusFeatureConfigType]
  readyForReview: NimbusReviewType
  monitoringDashboardUrl: String
  resultsReady: Boolean
  startDate: DateTime
  computedEndDate: DateTime
  isEnrollmentPaused: Boolean
  isEnrollmentPausePending: Boolean
  enrollmentEndDate: DateTime
  computedEnrollmentDays: Int
  computedDurationDays: Int
  canEdit: Boolean
  canArchive: Boolean
  canReview: Boolean
  reviewRequest: NimbusChangeLogType
  rejection: NimbusChangeLogType
  timeout: NimbusChangeLogType
  signoffRecommendations: NimbusSignoffRecommendationsType
  recipeJson: String
  reviewUrl: String
}

type NimbusFeatureConfigType {
  id: Int
  name: String!
  slug: String!
  description: String
  application: NimbusExperimentApplicationEnum
  ownerEmail: String
  schema: String
  readOnly: Boolean!
  nimbusexperimentSet: [NimbusExperimentType!]!
  nimbusbranchfeaturevalueSet: [NimbusBranchFeatureValueType!]!
}

enum NimbusIsolationGroupApplication {
  FIREFOX_DESKTOP
  FENIX
  IOS
  FOCUS_ANDROID
  KLAR_ANDROID
  FOCUS_IOS
  KLAR_IOS
}

type NimbusIsolationGroupType {
  application: NimbusIsolationGroupApplication!
  name: String!
  instance: Int!
  total: Int!
  bucketRanges: [NimbusBucketRangeType!]!
}

type NimbusLabelValueType {
  label: String
  value: String
}

type NimbusLocaleType {
  id: Int
  code: String
  name: String
  nimbusexperimentSet: [NimbusExperimentType!]!
}

type NimbusOutcomeMetricType {
  slug: String
  friendlyName: String
  description: String
}

type NimbusOutcomeType {
  friendlyName: String
  slug: String
  application: NimbusExperimentApplicationEnum
  description: String
  isDefault: Boolean
  metrics: [NimbusOutcomeMetricType]
}

type NimbusReviewType {
  message: ObjectField
  warnings: ObjectField
  ready: Boolean
}

type NimbusSignoffRecommendationsType {
  qaSignoff: Boolean
  vpSignoff: Boolean
  legalSignoff: Boolean
}

type NimbusUserType {
  id: Int
  username: String!
  firstName: String!
  lastName: String!
  email: String!
}

scalar ObjectField

type ProjectType {
  id: Int
  name: String!
  slug: String!
  nimbusexperimentSet: [NimbusExperimentType!]!
}

type Query {
  experiments: [NimbusExperimentType]
  experimentBySlug(slug: String!): NimbusExperimentType
  nimbusConfig: NimbusConfigurationType
}

input ReferenceBranchInput {
  id: Int
  name: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean
  featureValue: String
  featureValues: [BranchFeatureValueInput]
  screenshots: [BranchScreenshotInput]
}

input TreatmentBranchInput {
  id: Int
  name: String!
  description: String!
  ratio: Int!
  featureEnabled: Boolean
  featureValue: String
  featureValues: [BranchFeatureValueInput]
  screenshots: [BranchScreenshotInput]
}

type UpdateExperiment {
  nimbusExperiment: NimbusExperimentType
  message: ObjectField
}

scalar Upload
