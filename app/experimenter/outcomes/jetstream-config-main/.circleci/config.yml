version: 2.1

jobs:
  validate:
    docker:
    - image: gcr.io/moz-fx-data-experiments/jetstream:latest
    environment:
      BASE_COMMIT: << pipeline.git.base_revision >>
      REVISION_COMMIT: <<pipeline.git.revision>>
    steps:
    - checkout
    - run:
        name: Validate config files
        command: |
          changed_files=$(git diff --name-only $BASE_COMMIT..$REVISION_COMMIT -- '*.toml' '*.toml.example')
          echo "Run validation on changed files: "
          echo $changed_files
          jetstream validate_config $changed_files
  rerun:
    docker:
    - image: google/cloud-sdk
    steps:
    - checkout
    - &skip_forked_pr
      run:
        name: Early return if this build is from a forked PR
        command: |
          if [ -n "$CIRCLE_PR_NUMBER" ]; then
            echo "Do not re-run analysis on forked PRs, so marking this step successful"
            circleci step halt
          fi
    - run:
        name: Authorize gcloud CLI
        command: |
          # required for parsing kubectl pod statuses
          apt-get install jq -y
          apt-get install uuid-runtime
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
          echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set project $GCLOUD_PROJECT
          gcloud container clusters get-credentials jetstream --zone us-central1-a --project $GCLOUD_PROJECT
    - run:
        name: Rerun jetstream
        command: |
          # stop running instances so that they do not interfere
          uuid=`uuidgen`
          pod_identifier="jetstream-${uuid}"
          kubectl delete pod -l app=$pod_identifier
          # start a new instance
          kubectl run $pod_identifier --image=gcr.io/moz-fx-data-experiments/jetstream -l app=$pod_identifier --restart=Never --command -- jetstream rerun-config-changed --argo --return-status --recreate-enrollments

          # link to logs
          cur_date=`date -u +%FT%TZ`
          echo "Pod Logs: https://console.cloud.google.com/logs/query;query=resource.type%3D%22k8s_container%22%0Aresource.labels.project_id%3D%22moz-fx-data-experiments%22%0Aresource.labels.location%3D%22us-central1-a%22%0Aresource.labels.cluster_name%3D%22jetstream%22%0Aresource.labels.namespace_name%3D%22default%22?scrollTimestamp=$cur_date"
          echo "Analysis Errors can be accessed via Redash: https://sql.telemetry.mozilla.org/dashboard/jetstream-errors?p_experiment=%25"
          # wait for pod to finish and check status
          running=true
          while [ $running = true ]
          do
            echo "Wait for jetstream to finish"
            pod_status=`kubectl get pod -l app=$pod_identifier --no-headers -o custom-columns=":status.phase"`
            if [ $pod_status = 'Succeeded' ] || [ $pod_status = 'Failed' ]; then
              running=false
            fi
            sleep 10
          done
          # delete pod
          kubectl delete pod -l app=$pod_identifier
          if [ $pod_status = 'Failed' ]; then
            echo "Error when running jetstream. Check the logs for more information."
            exit 1
          elif [ $pod_status = 'Succeeded' ]; then
            echo "Jetstream successfully completed."
          else
            echo "Jetstream completed in unknown status. Please check the logs."
            echo "Analysis Errors can be accessed via Redash: https://sql.telemetry.mozilla.org/dashboard/jetstream-errors?p_experiment=%25"
            exit 1
          fi
  docs:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: "98:ba:de:b1:23:71:8d:0a:c2:98:98:ac:e8:97:ae:0d"
      - run:
          name: Build and deploy docs
          command: |
            python3.8 -m venv venv/
            venv/bin/pip install -r .scripts/requirements.txt
            venv/bin/python3 .scripts/generate_docs.py \
              --output_dir=generated_docs/
            cd generated_docs/
            PATH="../venv/bin:$PATH" mkdocs gh-deploy \
              -m "[ci skip] Deployed {sha} with MkDocs version: {version}"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - validate
      - rerun:
          filters:
            branches:
              only: main
      - docs:
          filters:
            branches:
              only: main
