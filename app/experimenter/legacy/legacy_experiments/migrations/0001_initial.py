# Generated by Django 3.2.13 on 2022-05-12 18:01

import django.contrib.postgres.fields
import django.core.serializers.json
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import experimenter.experiments.constants.legacy
import experimenter.legacy.legacy_experiments.models


def move_permissions(apps, schema_editor):
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    Experiment = apps.get_model("legacy_experiments", "Experiment")

    content_type = ContentType.objects.get_for_model(Experiment)
    Permission.objects.filter(codename="can_check_relman_signoff").update(
        content_type=content_type
    )
    Permission.objects.filter(codename="can_check_QA_signoff").update(
        content_type=content_type
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("base", "0004_language"),
        ("projects", "0005_project"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("experiments", "0209_auto_20220512_1801"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="Experiment",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "type",
                            models.CharField(
                                choices=[
                                    ("pref", "Pref-Flip Experiment"),
                                    ("addon", "Add-On Experiment"),
                                    ("generic", "Generic Experiment"),
                                    ("rollout", "Staged Rollout"),
                                    ("message", "Message Router Content Experiment"),
                                ],
                                default="pref",
                                max_length=255,
                            ),
                        ),
                        (
                            "status",
                            models.CharField(
                                choices=[
                                    ("Draft", "Draft"),
                                    ("Review", "Ready for Sign-Off"),
                                    ("Ship", "Ready to Ship"),
                                    ("Accepted", "Accepted by Normandy"),
                                    ("Live", "Live"),
                                    ("Complete", "Complete"),
                                    ("Rejected", "Rejected"),
                                ],
                                default="Draft",
                                max_length=255,
                            ),
                        ),
                        ("archived", models.BooleanField(default=False)),
                        ("name", models.CharField(max_length=255, unique=True)),
                        ("slug", models.SlugField(max_length=255, unique=True)),
                        ("public_description", models.TextField(blank=True, null=True)),
                        (
                            "short_description",
                            models.TextField(blank=True, default="", null=True),
                        ),
                        (
                            "related_work",
                            models.TextField(blank=True, default="", null=True),
                        ),
                        ("proposed_start_date", models.DateField(blank=True, null=True)),
                        (
                            "proposed_duration",
                            models.PositiveIntegerField(
                                blank=True,
                                null=True,
                                validators=[
                                    django.core.validators.MaxValueValidator(1000)
                                ],
                            ),
                        ),
                        (
                            "proposed_enrollment",
                            models.PositiveIntegerField(
                                blank=True,
                                null=True,
                                validators=[
                                    django.core.validators.MaxValueValidator(1000)
                                ],
                            ),
                        ),
                        (
                            "message_type",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("cfr", "CFR"),
                                    ("about:welcome", "about:welcome"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "message_template",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("cfr_doorhanger", "CFR Doorhanger"),
                                    ("cfr_urlbar_chiclet", "CFR Urlbar Chiclet"),
                                    ("milestone_message", "Milestone Message"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        ("is_multi_pref", models.BooleanField(default=False)),
                        (
                            "rollout_type",
                            models.CharField(
                                choices=[
                                    ("pref", "Pref Rollout"),
                                    ("addon", "Add-On Rollout"),
                                ],
                                default="pref",
                                max_length=255,
                            ),
                        ),
                        (
                            "rollout_playbook",
                            models.CharField(
                                blank=True,
                                choices=[
                                    (None, ""),
                                    ("low_risk", "Low Risk Schedule"),
                                    ("high_risk", "High Risk Schedule"),
                                    ("marketing", "Marketing Launch Schedule"),
                                    ("custom", "Custom Schedule"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "addon_experiment_id",
                            models.CharField(
                                blank=True, max_length=255, null=True, unique=True
                            ),
                        ),
                        (
                            "addon_release_url",
                            models.URLField(blank=True, max_length=400, null=True),
                        ),
                        ("is_branched_addon", models.BooleanField(default=False)),
                        (
                            "pref_name",
                            models.CharField(blank=True, max_length=255, null=True),
                        ),
                        (
                            "pref_type",
                            models.CharField(
                                blank=True,
                                choices=[
                                    (None, "Firefox Pref Type"),
                                    ("boolean", "boolean"),
                                    ("integer", "integer"),
                                    ("string", "string"),
                                    ("json string", "json string"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "pref_branch",
                            models.CharField(
                                blank=True,
                                choices=[
                                    (None, "Firefox Pref Branch"),
                                    ("default", "default"),
                                    ("user", "user"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        ("pref_value", models.TextField(blank=True, null=True)),
                        (
                            "population_percent",
                            models.DecimalField(
                                blank=True,
                                decimal_places=4,
                                default=0.0,
                                max_digits=7,
                                null=True,
                            ),
                        ),
                        (
                            "total_enrolled_clients",
                            models.PositiveIntegerField(blank=True, null=True),
                        ),
                        (
                            "firefox_min_version",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("55.0", "Firefox 55.0"),
                                    ("56.0", "Firefox 56.0"),
                                    ("57.0", "Firefox 57.0"),
                                    ("58.0", "Firefox 58.0"),
                                    ("59.0", "Firefox 59.0"),
                                    ("60.0", "Firefox 60.0"),
                                    ("61.0", "Firefox 61.0"),
                                    ("62.0", "Firefox 62.0"),
                                    ("63.0", "Firefox 63.0"),
                                    ("64.0", "Firefox 64.0"),
                                    ("65.0", "Firefox 65.0"),
                                    ("66.0", "Firefox 66.0"),
                                    ("67.0", "Firefox 67.0"),
                                    ("68.0", "Firefox 68.0"),
                                    ("69.0", "Firefox 69.0"),
                                    ("70.0", "Firefox 70.0"),
                                    ("71.0", "Firefox 71.0"),
                                    ("72.0", "Firefox 72.0"),
                                    ("73.0", "Firefox 73.0"),
                                    ("74.0", "Firefox 74.0"),
                                    ("75.0", "Firefox 75.0"),
                                    ("76.0", "Firefox 76.0"),
                                    ("77.0", "Firefox 77.0"),
                                    ("78.0", "Firefox 78.0"),
                                    ("79.0", "Firefox 79.0"),
                                    ("80.0", "Firefox 80.0"),
                                    ("81.0", "Firefox 81.0"),
                                    ("82.0", "Firefox 82.0"),
                                    ("83.0", "Firefox 83.0"),
                                    ("84.0", "Firefox 84.0"),
                                    ("85.0", "Firefox 85.0"),
                                    ("86.0", "Firefox 86.0"),
                                    ("87.0", "Firefox 87.0"),
                                    ("88.0", "Firefox 88.0"),
                                    ("89.0", "Firefox 89.0"),
                                    ("90.0", "Firefox 90.0"),
                                    ("91.0", "Firefox 91.0"),
                                    ("92.0", "Firefox 92.0"),
                                    ("93.0", "Firefox 93.0"),
                                    ("94.0", "Firefox 94.0"),
                                    ("95.0", "Firefox 95.0"),
                                    ("96.0", "Firefox 96.0"),
                                    ("97.0", "Firefox 97.0"),
                                    ("98.0", "Firefox 98.0"),
                                    ("99.0", "Firefox 99.0"),
                                    ("100.0", "Firefox 100.0"),
                                    ("101.0", "Firefox 101.0"),
                                    ("102.0", "Firefox 102.0"),
                                    ("103.0", "Firefox 103.0"),
                                    ("104.0", "Firefox 104.0"),
                                    ("105.0", "Firefox 105.0"),
                                    ("106.0", "Firefox 106.0"),
                                    ("107.0", "Firefox 107.0"),
                                    ("108.0", "Firefox 108.0"),
                                    ("109.0", "Firefox 109.0"),
                                    ("110.0", "Firefox 110.0"),
                                    ("111.0", "Firefox 111.0"),
                                    ("112.0", "Firefox 112.0"),
                                    ("113.0", "Firefox 113.0"),
                                    ("114.0", "Firefox 114.0"),
                                    ("115.0", "Firefox 115.0"),
                                    ("116.0", "Firefox 116.0"),
                                    ("117.0", "Firefox 117.0"),
                                    ("118.0", "Firefox 118.0"),
                                    ("119.0", "Firefox 119.0"),
                                    ("120.0", "Firefox 120.0"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "firefox_max_version",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("55.0", "Firefox 55.0"),
                                    ("56.0", "Firefox 56.0"),
                                    ("57.0", "Firefox 57.0"),
                                    ("58.0", "Firefox 58.0"),
                                    ("59.0", "Firefox 59.0"),
                                    ("60.0", "Firefox 60.0"),
                                    ("61.0", "Firefox 61.0"),
                                    ("62.0", "Firefox 62.0"),
                                    ("63.0", "Firefox 63.0"),
                                    ("64.0", "Firefox 64.0"),
                                    ("65.0", "Firefox 65.0"),
                                    ("66.0", "Firefox 66.0"),
                                    ("67.0", "Firefox 67.0"),
                                    ("68.0", "Firefox 68.0"),
                                    ("69.0", "Firefox 69.0"),
                                    ("70.0", "Firefox 70.0"),
                                    ("71.0", "Firefox 71.0"),
                                    ("72.0", "Firefox 72.0"),
                                    ("73.0", "Firefox 73.0"),
                                    ("74.0", "Firefox 74.0"),
                                    ("75.0", "Firefox 75.0"),
                                    ("76.0", "Firefox 76.0"),
                                    ("77.0", "Firefox 77.0"),
                                    ("78.0", "Firefox 78.0"),
                                    ("79.0", "Firefox 79.0"),
                                    ("80.0", "Firefox 80.0"),
                                    ("81.0", "Firefox 81.0"),
                                    ("82.0", "Firefox 82.0"),
                                    ("83.0", "Firefox 83.0"),
                                    ("84.0", "Firefox 84.0"),
                                    ("85.0", "Firefox 85.0"),
                                    ("86.0", "Firefox 86.0"),
                                    ("87.0", "Firefox 87.0"),
                                    ("88.0", "Firefox 88.0"),
                                    ("89.0", "Firefox 89.0"),
                                    ("90.0", "Firefox 90.0"),
                                    ("91.0", "Firefox 91.0"),
                                    ("92.0", "Firefox 92.0"),
                                    ("93.0", "Firefox 93.0"),
                                    ("94.0", "Firefox 94.0"),
                                    ("95.0", "Firefox 95.0"),
                                    ("96.0", "Firefox 96.0"),
                                    ("97.0", "Firefox 97.0"),
                                    ("98.0", "Firefox 98.0"),
                                    ("99.0", "Firefox 99.0"),
                                    ("100.0", "Firefox 100.0"),
                                    ("101.0", "Firefox 101.0"),
                                    ("102.0", "Firefox 102.0"),
                                    ("103.0", "Firefox 103.0"),
                                    ("104.0", "Firefox 104.0"),
                                    ("105.0", "Firefox 105.0"),
                                    ("106.0", "Firefox 106.0"),
                                    ("107.0", "Firefox 107.0"),
                                    ("108.0", "Firefox 108.0"),
                                    ("109.0", "Firefox 109.0"),
                                    ("110.0", "Firefox 110.0"),
                                    ("111.0", "Firefox 111.0"),
                                    ("112.0", "Firefox 112.0"),
                                    ("113.0", "Firefox 113.0"),
                                    ("114.0", "Firefox 114.0"),
                                    ("115.0", "Firefox 115.0"),
                                    ("116.0", "Firefox 116.0"),
                                    ("117.0", "Firefox 117.0"),
                                    ("118.0", "Firefox 118.0"),
                                    ("119.0", "Firefox 119.0"),
                                    ("120.0", "Firefox 120.0"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "firefox_channel",
                            models.CharField(
                                blank=True,
                                choices=[
                                    (None, "Firefox Channel"),
                                    ("Nightly", "Nightly"),
                                    ("Beta", "Beta"),
                                    ("Release", "Release"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "client_matching",
                            models.TextField(
                                blank=True,
                                default="Prefs:\n\nExperiments:\n\nAny additional filters:\n    ",
                                null=True,
                            ),
                        ),
                        (
                            "platforms",
                            django.contrib.postgres.fields.ArrayField(
                                base_field=models.CharField(max_length=200),
                                blank=True,
                                default=experimenter.legacy.legacy_experiments.models.default_all_platforms,
                                null=True,
                                size=None,
                            ),
                        ),
                        (
                            "windows_versions",
                            django.contrib.postgres.fields.ArrayField(
                                base_field=models.CharField(max_length=200),
                                blank=True,
                                null=True,
                                size=None,
                            ),
                        ),
                        (
                            "profile_age",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("All Profiles", "All Profiles"),
                                    ("New Profiles Only", "New Profiles Only"),
                                    ("Existing Profiles Only", "Existing Profiles Only"),
                                ],
                                default="All Profiles",
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "design",
                            models.TextField(
                                blank=True,
                                default="What is the design of this delivery? Explain in detail.",
                                null=True,
                            ),
                        ),
                        (
                            "objectives",
                            models.TextField(
                                blank=True,
                                default="If we <do this/build this/create this change in the experiment> for <these users>, then we will see <this outcome>.\nWe believe this because we have observed <this> via <data source, UR, survey>.\n\nOptional - We believe this outcome will <describe impact> on <core metric>\n    ",
                                null=True,
                            ),
                        ),
                        (
                            "analysis",
                            models.TextField(
                                blank=True,
                                default="We will measure <outcome> by an <increase/decrease/neutral> of <size> in <feature telemetry>.\nThere may be multiple leading indicator statements.\n\nOptional: We hypothesize the desired change will <increase/decrease/neutral> to the <core metric>.\n    ",
                                null=True,
                            ),
                        ),
                        ("survey_required", models.BooleanField(default=False)),
                        ("survey_urls", models.TextField(blank=True, null=True)),
                        ("survey_instructions", models.TextField(blank=True, null=True)),
                        (
                            "engineering_owner",
                            models.CharField(blank=True, max_length=255, null=True),
                        ),
                        (
                            "bugzilla_id",
                            models.CharField(blank=True, max_length=255, null=True),
                        ),
                        (
                            "recipe_slug",
                            models.CharField(blank=True, max_length=255, null=True),
                        ),
                        (
                            "normandy_id",
                            models.PositiveIntegerField(blank=True, null=True),
                        ),
                        (
                            "other_normandy_ids",
                            django.contrib.postgres.fields.ArrayField(
                                base_field=models.IntegerField(),
                                blank=True,
                                null=True,
                                size=None,
                            ),
                        ),
                        (
                            "data_science_issue_url",
                            models.URLField(blank=True, null=True),
                        ),
                        ("feature_bugzilla_url", models.URLField(blank=True, null=True)),
                        (
                            "risk_partner_related",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_brand",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_fast_shipped",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_confidential",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_release_population",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_revenue",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_data_category",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_external_team_impact",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_telemetry_data",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_ux",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_security",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_revision",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_technical",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_higher_risk",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "risk_technical_description",
                            models.TextField(blank=True, null=True),
                        ),
                        ("risks", models.TextField(blank=True, null=True)),
                        ("testing", models.TextField(blank=True, null=True)),
                        ("test_builds", models.TextField(blank=True, null=True)),
                        ("qa_status", models.TextField(blank=True, null=True)),
                        (
                            "review_science",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_engineering",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_qa_requested",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_intent_to_ship",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_bugzilla",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_qa",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_relman",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_advisory",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_legal",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_ux",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_security",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_vp",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_data_steward",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_comms",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "review_impacted_teams",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        ("is_paused", models.BooleanField(default=False)),
                        ("is_high_population", models.BooleanField(default=False)),
                        ("results_url", models.URLField(blank=True, null=True)),
                        ("results_initial", models.TextField(blank=True, null=True)),
                        (
                            "results_lessons_learned",
                            models.TextField(blank=True, null=True),
                        ),
                        (
                            "results_fail_to_launch",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_recipe_errors",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_restarts",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_low_enrollment",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_early_end",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_no_usable_data",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_failures_notes",
                            models.TextField(blank=True, null=True),
                        ),
                        (
                            "results_changes_to_firefox",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_data_for_hypothesis",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_confidence",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        (
                            "results_measure_impact",
                            models.BooleanField(blank=True, default=None, null=True),
                        ),
                        ("results_impact_notes", models.TextField(blank=True, null=True)),
                        (
                            "analysis_owner",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="analyzed_experiments",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "countries",
                            models.ManyToManyField(blank=True, to="base.Country"),
                        ),
                        ("locales", models.ManyToManyField(blank=True, to="base.Locale")),
                        (
                            "owner",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="owned_experiments",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "parent",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.SET_NULL,
                                to="legacy_experiments.experiment",
                            ),
                        ),
                        (
                            "projects",
                            models.ManyToManyField(blank=True, to="projects.Project"),
                        ),
                        (
                            "related_to",
                            models.ManyToManyField(
                                blank=True,
                                related_name="related_by",
                                to="legacy_experiments.Experiment",
                            ),
                        ),
                        (
                            "subscribers",
                            models.ManyToManyField(
                                blank=True,
                                related_name="subscribed_experiments",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Experiment",
                        "verbose_name_plural": "Experiments",
                        "db_table": "experiments_experiment",
                    },
                    bases=(
                        experimenter.experiments.constants.legacy.ExperimentConstants,
                        models.Model,
                    ),
                ),
                migrations.CreateModel(
                    name="ExperimentVariant",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("name", models.CharField(max_length=255)),
                        ("slug", models.SlugField(max_length=255)),
                        ("is_control", models.BooleanField(default=False)),
                        ("description", models.TextField(default="")),
                        ("ratio", models.PositiveIntegerField(default=1)),
                        (
                            "addon_release_url",
                            models.URLField(blank=True, max_length=400, null=True),
                        ),
                        ("value", models.TextField(blank=True, null=True)),
                        ("message_targeting", models.TextField(blank=True, null=True)),
                        ("message_threshold", models.TextField(blank=True, null=True)),
                        ("message_triggers", models.TextField(blank=True, null=True)),
                        (
                            "experiment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="variants",
                                to="legacy_experiments.experiment",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Experiment Variant",
                        "verbose_name_plural": "Experiment Variants",
                        "db_table": "experiments_experimentvariant",
                        "unique_together": {("slug", "experiment")},
                    },
                ),
                migrations.CreateModel(
                    name="ExperimentEmail",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "type",
                            models.CharField(
                                choices=[
                                    ("starting", "starting"),
                                    ("pausing", "pausing"),
                                    ("ending", "ending"),
                                    ("new comment", "new comment"),
                                    ("intent to ship", "intent to ship"),
                                ],
                                max_length=255,
                            ),
                        ),
                        ("sent_on", models.DateTimeField(auto_now_add=True)),
                        (
                            "experiment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="emails",
                                to="legacy_experiments.experiment",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "experiments_experimentemail",
                    },
                    bases=(
                        experimenter.experiments.constants.legacy.ExperimentConstants,
                        models.Model,
                    ),
                ),
                migrations.CreateModel(
                    name="ExperimentComment",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created_on", models.DateTimeField(auto_now_add=True)),
                        (
                            "section",
                            models.CharField(
                                choices=[
                                    ("timeline", "Timeline"),
                                    ("overview", "Overview"),
                                    ("normandy", "Normandy"),
                                    ("population", "Population"),
                                    ("design", "Design"),
                                    ("addon", "Add-On"),
                                    ("rollout", "Rollout"),
                                    ("branches", "Branches"),
                                    ("objectives", "Objectives"),
                                    ("analysis", "Analysis"),
                                    ("risks", "Risks"),
                                    ("testing", "Testing"),
                                    ("results", "Results"),
                                ],
                                max_length=255,
                            ),
                        ),
                        ("text", models.TextField()),
                        (
                            "created_by",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "experiment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="comments",
                                to="legacy_experiments.experiment",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Experiment Comment",
                        "verbose_name_plural": "Experiment Comments",
                        "db_table": "experiments_experimentcomment",
                        "ordering": ("created_on",),
                    },
                    bases=(
                        experimenter.experiments.constants.legacy.ExperimentConstants,
                        models.Model,
                    ),
                ),
                migrations.CreateModel(
                    name="ExperimentChangeLog",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "changed_on",
                            models.DateTimeField(
                                default=experimenter.legacy.legacy_experiments.models.ExperimentChangeLog.current_datetime
                            ),
                        ),
                        (
                            "old_status",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("Draft", "Draft"),
                                    ("Review", "Ready for Sign-Off"),
                                    ("Ship", "Ready to Ship"),
                                    ("Accepted", "Accepted by Normandy"),
                                    ("Live", "Live"),
                                    ("Complete", "Complete"),
                                    ("Rejected", "Rejected"),
                                ],
                                max_length=255,
                                null=True,
                            ),
                        ),
                        (
                            "new_status",
                            models.CharField(
                                choices=[
                                    ("Draft", "Draft"),
                                    ("Review", "Ready for Sign-Off"),
                                    ("Ship", "Ready to Ship"),
                                    ("Accepted", "Accepted by Normandy"),
                                    ("Live", "Live"),
                                    ("Complete", "Complete"),
                                    ("Rejected", "Rejected"),
                                ],
                                max_length=255,
                            ),
                        ),
                        ("message", models.TextField(blank=True, null=True)),
                        (
                            "changed_values",
                            models.JSONField(
                                blank=True,
                                encoder=django.core.serializers.json.DjangoJSONEncoder,
                                null=True,
                            ),
                        ),
                        (
                            "changed_by",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "experiment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="changes",
                                to="legacy_experiments.experiment",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Experiment Change Log",
                        "verbose_name_plural": "Experiment Change Logs",
                        "db_table": "experiments_experimentchangelog",
                        "ordering": ("changed_on",),
                    },
                ),
                migrations.CreateModel(
                    name="VariantPreferences",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("pref_name", models.CharField(max_length=255)),
                        (
                            "pref_type",
                            models.CharField(
                                choices=[
                                    (None, "Firefox Pref Type"),
                                    ("boolean", "boolean"),
                                    ("integer", "integer"),
                                    ("string", "string"),
                                    ("json string", "json string"),
                                ],
                                max_length=255,
                            ),
                        ),
                        ("pref_value", models.CharField(max_length=4096)),
                        (
                            "pref_branch",
                            models.CharField(
                                choices=[
                                    (None, "Firefox Pref Branch"),
                                    ("default", "default"),
                                    ("user", "user"),
                                ],
                                max_length=255,
                            ),
                        ),
                        (
                            "variant",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="preferences",
                                to="legacy_experiments.experimentvariant",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "experiments_variantpreferences",
                        "unique_together": {("variant", "pref_name")},
                    },
                ),
                migrations.CreateModel(
                    name="RolloutPreference",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("pref_name", models.CharField(max_length=255)),
                        (
                            "pref_type",
                            models.CharField(
                                choices=[
                                    (None, "Firefox Pref Type"),
                                    ("boolean", "boolean"),
                                    ("integer", "integer"),
                                    ("string", "string"),
                                    ("json string", "json string"),
                                ],
                                max_length=255,
                            ),
                        ),
                        ("pref_value", models.CharField(max_length=4096)),
                        (
                            "experiment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="preferences",
                                to="legacy_experiments.experiment",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "experiments_rolloutpreference",
                        "unique_together": {("experiment", "pref_name")},
                    },
                ),
            ],
            database_operations=[],
        ),
        migrations.RunPython(move_permissions),
    ]
