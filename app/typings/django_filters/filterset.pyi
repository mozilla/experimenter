"""
This type stub file was generated by pyright.
"""

def remote_queryset(field):
    """
    Get the queryset for the other side of a relationship. This works
    for both `RelatedField`s and `ForeignObjectRel`s.
    """
    ...

class FilterSetOptions:
    def __init__(self, options=...) -> None: ...

class FilterSetMetaclass(type):
    def __new__(cls, name, bases, attrs): ...
    @classmethod
    def get_declared_filters(cls, bases, attrs): ...

FILTER_FOR_DBFIELD_DEFAULTS = ...

class BaseFilterSet:
    FILTER_DEFAULTS = ...
    def __init__(self, data=..., queryset=..., *, request=..., prefix=...) -> None: ...
    def is_valid(self):  # -> Literal[False]:
        """
        Return True if the underlying form has no errors, or False otherwise.
        """
        ...
    @property
    def errors(self):
        """
        Return an ErrorDict for the data provided for the underlying form.
        """
        ...
    def filter_queryset(self, queryset):  # -> QuerySet[Unknown]:
        """
        Filter the queryset with the underlying form's `cleaned_data`. You must
        call `is_valid()` or `errors` before calling this method.

        This method should be overridden if additional filtering needs to be
        applied to the queryset before it is cached.
        """
        ...
    @property
    def qs(self): ...
    def get_form_class(self):  # -> Type[_]:
        """
        Returns a django Form suitable of validating the filterset data.

        This method should be overridden if the form class needs to be
        customized relative to the filterset instance.
        """
        ...
    @property
    def form(self): ...
    @classmethod
    def get_fields(
        cls,
    ):  # -> OrderedDict[Unknown, list[Any | Unknown | bool | str | dict[str, str] | None]]:
        """
        Resolve the 'fields' argument that should be used for generating filters on the
        filterset. This is 'Meta.fields' sans the fields in 'Meta.exclude'.
        """
        ...
    @classmethod
    def get_filter_name(cls, field_name, lookup_expr):  # -> str:
        """
        Combine a field name and lookup expression into a usable filter name.
        Exact lookups are the implicit default, so "exact" is stripped from the
        end of the filter name.
        """
        ...
    @classmethod
    def get_filters(cls):  # -> OrderedDict[Unknown, Unknown]:
        """
        Get all filters for the filterset. This is the combination of declared and
        generated filters.
        """
        ...
    @classmethod
    def filter_for_field(cls, field, field_name, lookup_expr=...): ...
    @classmethod
    def filter_for_lookup(cls, field, lookup_type): ...

class FilterSet(BaseFilterSet, metaclass=FilterSetMetaclass): ...

def filterset_factory(model, fields=...): ...
