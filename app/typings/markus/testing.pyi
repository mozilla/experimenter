"""
This type stub file was generated by pyright.
"""

def print_on_failure(
    fun,
):  # -> (metricsmock: Unknown, *args: Unknown, **kwargs: Unknown) -> Unknown:
    """Decorator to print metrics records on assertion failure."""
    ...

class MetricsMock:
    """Mock for recording metrics events and testing them.

    Mimics a metrics backend as a context manager. Keeps records of what got
    metricfied so that you can print them out, filter them, assert various
    things about them, etc.

    To use::

        from markus.testing import MetricsMock

        def test_something():
            with MetricsMock() as mm:
                # Do things that might record metrics here

                # Assert something about the metrics recorded
                mm.assert_incr_once(stat="some.random.key", value=1)

    When using the ``assert_*`` helper methods, if the assertion fails, it'll
    print the MetricsRecords that were emitted to stdout.

    """

    def __init__(self) -> None: ...
    def emit_to_backend(self, record): ...
    def emit(self, record): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...
    def get_records(self):  # -> list[Unknown]:
        """Return list of MetricsRecord instances.

        This is the list of :py:class:`markus.main.MetricsRecord` instances
        that were emitted while this :py:class:`markus.testing.MetricsMock` was
        active.

        """
        ...
    def filter_records(
        self, fun_name=..., stat=..., value=..., tags=...
    ):  # -> list[Unknown]:
        """Filter collected metrics records for ones that match specified criteria.

        Filtering is done by ANDing the requirements together. For example::

            with MetricsMock() as mm:
                # Do something that emits metrics

                assert mm.filter_records("incr", stat="some.key", tags=["color:blue"])

        :py:meth:`markus.testing.MetricsMock.filter_records` will return
        :py:class:`markus.main.MetricsRecord` instances that are ``"incr"`` AND
        the stat is ``"some.key"`` AND the tags list is ``["color:blue"]``.

        :arg str fun_name: "incr", "gauge", "timing", "histogram", or ``None``
        :arg str stat: the stat emitted
        :arg int/float value: the value
        :arg list tags: the list of tag strings or ``[]`` or ``None``

        :returns: list of :py:class:`markus.main.MetricsRecord` instances

        """
        ...
    def has_record(self, fun_name=..., stat=..., value=..., tags=...):  # -> bool:
        """Return True/False regarding whether collected metrics match criteria.

        :arg str fun_name: "incr", "gauge", "timing", "histogram", or ``None``
        :arg str stat: the stat emitted
        :arg int/float value: the value
        :arg list tags: the list of tag strings or ``[]`` or ``None``

        :returns: bool

        """
        ...
    def print_records(self):  # -> None:
        """Print all the collected metrics."""
        ...
    def clear_records(self):  # -> None:
        """Clear the records list."""
        ...
    @print_on_failure
    def assert_incr(self, stat, value=..., tags=...):  # -> None:
        """Asserts an incr was emitted at least once."""
        ...
    @print_on_failure
    def assert_incr_once(self, stat, value=..., tags=...):  # -> None:
        """Asserts an incr was emitted exactly once."""
        ...
    @print_on_failure
    def assert_not_incr(self, stat, value=..., tags=...):  # -> None:
        """Asserts an incr was not emitted."""
        ...
    @print_on_failure
    def assert_gauge(self, stat, value=..., tags=...):  # -> None:
        """Asserts a gauge was emitted at least once."""
        ...
    @print_on_failure
    def assert_gauge_once(self, stat, value=..., tags=...):  # -> None:
        """Asserts a gauge was emitted exactly once."""
        ...
    @print_on_failure
    def assert_not_gauge(self, stat, value=..., tags=...):  # -> None:
        """Asserts a gauge was not emitted."""
        ...
    @print_on_failure
    def assert_timing(self, stat, value=..., tags=...):  # -> None:
        """Asserts a timing was emitted at least once."""
        ...
    @print_on_failure
    def assert_timing_once(self, stat, value=..., tags=...):  # -> None:
        """Asserts a timing was emitted exactly once."""
        ...
    @print_on_failure
    def assert_not_timing(self, stat, value=..., tags=...):  # -> None:
        """Asserts a timing was not emitted."""
        ...
    @print_on_failure
    def assert_histogram(self, stat, value=..., tags=...):  # -> None:
        """Asserts a histogram was emitted at least once."""
        ...
    @print_on_failure
    def assert_histogram_once(self, stat, value=..., tags=...):  # -> None:
        """Asserts a histogram was emitted exactly once."""
        ...
    @print_on_failure
    def assert_not_histogram(self, stat, value=..., tags=...):  # -> None:
        """Asserts a histogram was not emitted."""
        ...
