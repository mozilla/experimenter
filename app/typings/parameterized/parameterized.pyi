"""
This type stub file was generated by pyright.
"""

PY3 = ...
PY2 = ...
if PY3:
    class InstanceType: ...
    lzip = ...
    text_type = ...
    string_types = ...
    bytes_type = ...
    def make_method(func, instance, type): ...

else:
    lzip = ...
    text_type = ...
    bytes_type = ...
    string_types = ...
    def make_method(func, instance, type): ...

def to_text(x): ...

CompatArgSpec = ...

def getargspec(func): ...
def skip_on_empty_helper(*a, **kw): ...
def reapply_patches_if_need(func): ...
def delete_patches_if_need(func): ...

_param = ...

class param(_param):
    """Represents a single parameter to a test case.

    For example::

        >>> p = param("foo", bar=16)
        >>> p
        param("foo", bar=16)
        >>> p.args
        ('foo', )
        >>> p.kwargs
        {'bar': 16}

    Intended to be used as an argument to ``@parameterized``::

        @parameterized([
            param("foo", bar=16),
        ])
        def test_stuff(foo, bar=16):
            pass
    """

    def __new__(cls, *args, **kwargs): ...
    @classmethod
    def explicit(cls, args=..., kwargs=...):  # -> Self@param:
        """Creates a ``param`` by explicitly specifying ``args`` and
        ``kwargs``::

            >>> param.explicit([1,2,3])
            param(*(1, 2, 3))
            >>> param.explicit(kwargs={"foo": 42})
            param(*(), **{"foo": "42"})
        """
        ...
    @classmethod
    def from_decorator(cls, args):  # -> param | Self@param:
        """Returns an instance of ``param()`` for ``@parameterized`` argument
        ``args``::

            >>> param.from_decorator((42, ))
            param(args=(42, ), kwargs={})
            >>> param.from_decorator("foo")
            param(args=("foo", ), kwargs={})
        """
        ...
    def __repr__(self): ...

class QuietOrderedDict(MaybeOrderedDict):
    """When OrderedDict is available, use it to make sure that the kwargs in
    doc strings are consistently ordered."""

    __str__ = ...
    __repr__ = ...

def parameterized_argument_value_pairs(
    func, p
):  # -> list[tuple[Unknown]] | zip[tuple[Unknown, Unknown]]:
    """Return tuples of parameterized arguments and their values.

    This is useful if you are writing your own doc_func
    function and need to know the values for each parameter name::

        >>> def func(a, foo=None, bar=42, **kwargs): pass
        >>> p = param(1, foo=7, extra=99)
        >>> parameterized_argument_value_pairs(func, p)
        [("a", 1), ("foo", 7), ("bar", 42), ("**kwargs", {"extra": 99})]

    If the function's first argument is named ``self`` then it will be
    ignored::

        >>> def func(self, a): pass
        >>> p = param(1)
        >>> parameterized_argument_value_pairs(func, p)
        [("a", 1)]

    Additionally, empty ``*args`` or ``**kwargs`` will be ignored::

        >>> def func(foo, *args): pass
        >>> p = param(1)
        >>> parameterized_argument_value_pairs(func, p)
        [("foo", 1)]
        >>> p = param(1, 16)
        >>> parameterized_argument_value_pairs(func, p)
        [("foo", 1), ("*args", (16, ))]
    """
    ...

def short_repr(x, n=...):  # -> str:
    """A shortened repr of ``x`` which is guaranteed to be ``unicode``::

    >>> short_repr("foo")
    u"foo"
    >>> short_repr("123456789", n=4)
    u"12...89"
    """
    ...

def default_doc_func(func, num, p): ...
def default_name_func(func, num, p): ...

_test_runner_override = ...
_test_runner_guess = ...
_test_runners = ...
_test_runner_aliases = ...

def set_test_runner(name): ...
def detect_runner():  # -> str | Any | Literal[True] | None:
    """Guess which test runner we're using by traversing the stack and looking
    for the first matching module. This *should* be reasonably safe, as
    it's done during test disocvery where the test runner should be the
    stack frame immediately outside."""
    ...

class parameterized:
    """Parameterize a test case::

    class TestInt(object):
        @parameterized([
            ("A", 10),
            ("F", 15),
            param("10", 42, base=42)
        ])
        def test_int(self, input, expected, base=16):
            actual = int(input, base=base)
            assert_equal(actual, expected)

    @parameterized([
        (2, 3, 5)
        (3, 5, 8),
    ])
    def test_add(a, b, expected):
        assert_equal(a + b, expected)
    """

    def __init__(self, input, doc_func=..., skip_on_empty=...) -> None: ...
    def __call__(self, test_func): ...
    def param_as_nose_tuple(self, test_self, func, num, p): ...
    def assert_not_in_testcase_subclass(self): ...
    @classmethod
    def input_as_callable(cls, input): ...
    @classmethod
    def check_input_values(cls, input_values): ...
    @classmethod
    def expand(
        cls, input, name_func=..., doc_func=..., skip_on_empty=..., **legacy
    ):  # -> (f: Unknown, instance: Unknown | None = None) -> (((*a: Unknown, **kw: Unknown) -> NoReturn) | None):
        """A "brute force" method of parameterizing test cases. Creates new
        test cases and injects them into the namespace that the wrapped
        function is being defined in. Useful for parameterizing tests in
        subclasses of 'UnitTest', where Nose test generators don't work.

        >>> @parameterized.expand([("foo", 1, 2)])
        ... def test_add1(name, input, expected):
        ...     actual = add1(input)
        ...     assert_equal(actual, expected)
        ...
        >>> locals()
        ... 'test_add1_foo_0': <function ...> ...
        >>>
        """
        ...
    @classmethod
    def param_as_standalone_func(cls, p, func, name): ...
    @classmethod
    def to_safe_name(cls, s): ...

def parameterized_class(
    attrs, input_values=..., class_name_func=..., classname_func=...
):  # -> (base_class: Unknown) -> Unknown:
    """Parameterizes a test class by setting attributes on the class.

    Can be used in two ways:

    1) With a list of dictionaries containing attributes to override::

        @parameterized_class([
            { "username": "foo" },
            { "username": "bar", "access_level": 2 },
        ])
        class TestUserAccessLevel(TestCase):
            ...

    2) With a tuple of attributes, then a list of tuples of values:

        @parameterized_class(("username", "access_level"), [
            ("foo", 1),
            ("bar", 2)
        ])
        class TestUserAccessLevel(TestCase):
            ...

    """
    ...

def get_class_name_suffix(params_dict): ...
def default_class_name_func(cls, num, params_dict): ...
