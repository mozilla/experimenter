"""
This type stub file was generated by pyright.
"""

from typing import Any

import six

from .base import BaseOptions, BaseType
from .unmountedtype import UnmountedType

if six.PY3: ...

class ScalarOptions(BaseOptions): ...

class Scalar(UnmountedType, BaseType):
    """
    Scalar Type Definition

    The leaf values of any request and input values to arguments are
    Scalars (or Enums) and are defined with a name and a series of functions
    used to parse input from ast or variables and to ensure validity.
    """

    @classmethod
    def __init_subclass_with_meta__(cls, **options): ...
    serialize = ...
    parse_value = ...
    parse_literal = ...
    @classmethod
    def get_type(cls):  # -> Type[Self@Scalar]:
        """
        This function is called when the unmounted type (Scalar instance)
        is mounted (as a Field, InputField or Argument)
        """
        ...

MAX_INT = ...
MIN_INT = ...

class Int(Scalar):
    """
    The `Int` scalar type represents non-fractional signed whole numeric
    values. Int can represent values between -(2^53 - 1) and 2^53 - 1 since
    represented in JSON as double-precision floating point numbers specified
    by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
    """

    @staticmethod
    def coerce_int(value): ...
    serialize = ...
    parse_value = ...
    @staticmethod
    def parse_literal(ast): ...

class Float(Scalar):
    """
    The `Float` scalar type represents signed double-precision fractional
    values as specified by
    [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
    """

    @staticmethod
    def coerce_float(value: Any) -> float: ...
    serialize = ...
    parse_value = ...
    @staticmethod
    def parse_literal(ast): ...

class String(Scalar):
    """
    The `String` scalar type represents textual data, represented as UTF-8
    character sequences. The String type is most often used by GraphQL to
    represent free-form human-readable text.
    """

    @staticmethod
    def coerce_string(value): ...
    serialize = ...
    parse_value = ...
    @staticmethod
    def parse_literal(ast): ...

class Boolean(Scalar):
    """
    The `Boolean` scalar type represents `true` or `false`.
    """

    serialize = bool
    parse_value = bool
    @staticmethod
    def parse_literal(ast): ...

class ID(Scalar):
    """
    The `ID` scalar type represents a unique identifier, often used to
    refetch an object or as key for a cache. The ID type appears in a JSON
    response as a String; however, it is not intended to be human-readable.
    When expected as an input type, any string (such as `"4"`) or integer
    (such as `4`) input value will be accepted as an ID.
    """

    serialize = str
    parse_value = str
    @staticmethod
    def parse_literal(ast): ...
