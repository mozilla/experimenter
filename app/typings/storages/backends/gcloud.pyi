"""
This type stub file was generated by pyright.
"""

from django.core.files.base import File
from django.utils.deconstruct import deconstructible
from storages.base import BaseStorage
from storages.compress import CompressedFileMixin, CompressStorageMixin

CONTENT_ENCODING = ...
CONTENT_TYPE = ...

class GoogleCloudFile(CompressedFileMixin, File):
    def __init__(self, name, mode, storage) -> None: ...
    @property
    def size(self): ...
    file = ...
    def read(self, num_bytes=...): ...
    def write(self, content): ...
    def close(self): ...

@deconstructible
class GoogleCloudStorage(CompressStorageMixin, BaseStorage):
    def __init__(self, **settings) -> None: ...
    def get_default_settings(self): ...
    @property
    def client(self): ...
    @property
    def bucket(self): ...
    def get_object_parameters(self, name):
        """Override this to return a dictionary of overwritable blob-property to value.

        Returns GS_OBJECT_PARAMETRS by default. See the docs for all possible options.
        """
        ...
    def delete(self, name): ...
    def exists(self, name): ...
    def listdir(self, name): ...
    def size(self, name): ...
    def modified_time(self, name): ...
    def get_modified_time(self, name): ...
    def get_created_time(self, name):  # -> datetime | None:
        """
        Return the creation time (as a datetime) of the file specified by name.
        The datetime will be timezone-aware if USE_TZ=True.
        """
        ...
    def url(self, name):  # -> str:
        """
        Return public url or a signed url for the Blob.
        This DOES NOT check for existance of Blob - that makes codes too slow
        for many use cases.
        """
        ...
    def get_available_name(self, name, max_length=...): ...
