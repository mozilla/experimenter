"""
This type stub file was generated by pyright.
"""

import typing as T

from . import utils

logger = ...

class BaseDeclaration(utils.OrderedBase):
    """A factory declaration.

    Declarations mark an attribute as needing lazy evaluation.
    This allows them to refer to attributes defined by other BaseDeclarations
    in the same factory.
    """

    FACTORY_BUILDER_PHASE = ...
    UNROLL_CONTEXT_BEFORE_EVALUATION = ...
    def __init__(self, **defaults) -> None: ...
    def unroll_context(self, instance, step, context): ...
    def evaluate_pre(self, instance, step, overrides): ...
    def evaluate(self, instance, step, extra):
        """Evaluate this declaration.

        Args:
            instance (builder.Resolver): The object holding currently computed
                attributes
            step: a factory.builder.BuildStep
            extra (dict): additional, call-time added kwargs
                for the step.
        """
        ...

class OrderedDeclaration(BaseDeclaration):
    """Compatibility"""

    ...

class LazyFunction(BaseDeclaration):
    """Simplest BaseDeclaration computed by calling the given function.

    Attributes:
        function (function): a function without arguments and
            returning the computed value.
    """

    def __init__(self, function) -> None: ...
    def evaluate(self, instance, step, extra): ...

class LazyAttribute(BaseDeclaration):
    """Specific BaseDeclaration computed using a lambda.

    Attributes:
        function (function): a function, expecting the current LazyStub and
            returning the computed value.
    """

    def __init__(self, function) -> None: ...
    def evaluate(self, instance, step, extra): ...

class _UNSPECIFIED: ...

def deepgetattr(obj, name, default=...):  # -> Any | Type[_UNSPECIFIED]:
    """Try to retrieve the given attribute of an object, digging on '.'.

    This is an extended getattr, digging deeper if '.' is found.

    Args:
        obj (object): the object of which an attribute should be read
        name (str): the name of an attribute to look up.
        default (object): the default value to use if the attribute wasn't found

    Returns:
        the attribute pointed to by 'name', splitting on '.'.

    Raises:
        AttributeError: if obj has no 'name' attribute.
    """
    ...

class SelfAttribute(BaseDeclaration):
    """Specific BaseDeclaration copying values from other fields.

    If the field name starts with two dots or more, the lookup will be anchored
    in the related 'parent'.

    Attributes:
        depth (int): the number of steps to go up in the containers chain
        attribute_name (str): the name of the attribute to copy.
        default (object): the default value to use if the attribute doesn't
            exist.
    """

    def __init__(self, attribute_name, default=...) -> None: ...
    def evaluate(self, instance, step, extra): ...
    def __repr__(self): ...

class Iterator(BaseDeclaration):
    """Fill this value using the values returned by an iterator.

    Warning: the iterator should not end !

    Attributes:
        iterator (iterable): the iterator whose value should be used.
        getter (callable or None): a function to parse returned values
    """

    def __init__(self, iterator, cycle=..., getter=...) -> None: ...
    def evaluate(self, instance, step, extra): ...
    def reset(self):  # -> None:
        """Reset the internal iterator."""
        ...

class Sequence(BaseDeclaration):
    """Specific BaseDeclaration to use for 'sequenced' fields.

    These fields are typically used to generate increasing unique values.

    Attributes:
        function (function): A function, expecting the current sequence counter
            and returning the computed value.
    """

    def __init__(self, function) -> None: ...
    def evaluate(self, instance, step, extra): ...

class LazyAttributeSequence(Sequence):
    """Composite of a LazyAttribute and a Sequence.

    Attributes:
        function (function): A function, expecting the current LazyStub and the
            current sequence counter.
        type (function): A function converting an integer into the expected kind
            of counter for the 'function' attribute.
    """

    def evaluate(self, instance, step, extra): ...

class ContainerAttribute(BaseDeclaration):
    """Variant of LazyAttribute, also receives the containers of the object.

    Attributes:
        function (function): A function, expecting the current LazyStub and the
            (optional) object having a subfactory containing this attribute.
        strict (bool): Whether evaluating should fail when the containers are
            not passed in (i.e used outside a SubFactory).
    """

    def __init__(self, function, strict=...) -> None: ...
    def evaluate(self, instance, step, extra):
        """Evaluate the current ContainerAttribute.

        Args:
            obj (LazyStub): a lazy stub of the object being constructed, if
                needed.
            containers (list of LazyStub): a list of lazy stubs of factories
                being evaluated in a chain, each item being a future field of
                next one.
        """
        ...

class ParameteredAttribute(BaseDeclaration):
    """Base class for attributes expecting parameters.

    Attributes:
        defaults (dict): Default values for the parameters.
            May be overridden by call-time parameters.
    """

    def evaluate(self, instance, step, extra):
        """Evaluate the current definition and fill its attributes.

        Uses attributes definition in the following order:
        - values defined when defining the ParameteredAttribute
        - additional values defined when instantiating the containing factory

        Args:
            instance (builder.Resolver): The object holding currently computed
                attributes
            step: a factory.builder.BuildStep
            extra (dict): additional, call-time added kwargs
                for the step.
        """
        ...
    def generate(self, step, params):
        """Actually generate the related attribute.

        Args:
            sequence (int): the current sequence number
            obj (LazyStub): the object being constructed
            create (bool): whether the calling factory was in 'create' or
                'build' mode
            params (dict): parameters inherited from init and evaluation-time
                overrides.

        Returns:
            Computed value for the current declaration.
        """
        ...

class _FactoryWrapper:
    """Handle a 'factory' arg.

    Such args can be either a Factory subclass, or a fully qualified import
    path for that subclass (e.g 'myapp.factories.MyFactory').
    """

    def __init__(self, factory_or_path) -> None: ...
    def get(self): ...
    def __repr__(self): ...

class SubFactory(BaseDeclaration):
    """Base class for attributes based upon a sub-factory.

    Attributes:
        defaults (dict): Overrides to the defaults defined in the wrapped
            factory
        factory (base.Factory): the wrapped factory
    """

    FORCE_SEQUENCE = ...
    UNROLL_CONTEXT_BEFORE_EVALUATION = ...
    def __init__(self, factory, **kwargs) -> None: ...
    def get_factory(self):  # -> Any | type:
        """Retrieve the wrapped factory.Factory subclass."""
        ...
    def evaluate(self, instance, step, extra):
        """Evaluate the current definition and fill its attributes.

        Args:
            step: a factory.builder.BuildStep
            params (dict): additional, call-time added kwargs
                for the step.
        """
        ...

class Dict(SubFactory):
    """Fill a dict with usual declarations."""

    FORCE_SEQUENCE = ...
    def __init__(self, params, dict_factory=...) -> None: ...

class List(SubFactory):
    """Fill a list with standard declarations."""

    FORCE_SEQUENCE = ...
    def __init__(self, params, list_factory=...) -> None: ...

class Skip:
    def __bool__(self): ...

SKIP = ...

class Maybe(BaseDeclaration):
    def __init__(self, decider, yes_declaration=..., no_declaration=...) -> None: ...
    def evaluate_post(self, instance, step, overrides):  # -> Skip:
        """Handle post-generation declarations"""
        ...
    def evaluate_pre(self, instance, step, overrides): ...
    def __repr__(self): ...

class Parameter(utils.OrderedBase):
    """A complex parameter, to be used in a Factory.Params section.

    Must implement:
    - A "compute" function, performing the actual declaration override
    - Optionally, a get_revdeps() function (to compute other parameters it may alter)
    """

    def as_declarations(self, field_name, declarations):
        """Compute the overrides for this parameter.

        Args:
        - field_name (str): the field this parameter is installed at
        - declarations (dict): the global factory declarations

        Returns:
            dict: the declarations to override
        """
        ...
    def get_revdeps(self, parameters):  # -> list[Unknown]:
        """Retrieve the list of other parameters modified by this one."""
        ...

class SimpleParameter(Parameter):
    def __init__(self, value) -> None: ...
    def as_declarations(self, field_name, declarations): ...
    @classmethod
    def wrap(cls, value): ...

class Trait(Parameter):
    """The simplest complex parameter, it enables a bunch of new declarations based on a boolean flag."""

    def __init__(self, **overrides) -> None: ...
    def as_declarations(self, field_name, declarations): ...
    def get_revdeps(self, parameters):  # -> list[Unknown]:
        """This might alter fields it's injecting."""
        ...
    def __repr__(self): ...

class PostGenerationContext(T.NamedTuple):
    value_provided: bool
    value: T.Any
    extra: T.Dict[str, T.Any]
    ...

class PostGenerationDeclaration(BaseDeclaration):
    """Declarations to be called once the model object has been generated."""

    FACTORY_BUILDER_PHASE = ...
    def evaluate_post(self, instance, step, overrides): ...
    def call(self, instance, step, context):
        """Call this hook; no return value is expected.

        Args:
            obj (object): the newly generated object
            create (bool): whether the object was 'built' or 'created'
            context: a builder.PostGenerationContext containing values
                extracted from the containing factory's declaration
        """
        ...

class PostGeneration(PostGenerationDeclaration):
    """Calls a given function once the object has been generated."""

    def __init__(self, function) -> None: ...
    def call(self, instance, step, context): ...

class RelatedFactory(PostGenerationDeclaration):
    """Calls a factory once the object has been generated.

    Attributes:
        factory (Factory): the factory to call
        defaults (dict): extra declarations for calling the related factory
        name (str): the name to use to refer to the generated object when
            calling the related factory
    """

    UNROLL_CONTEXT_BEFORE_EVALUATION = ...
    def __init__(self, factory, factory_related_name=..., **defaults) -> None: ...
    def get_factory(self):  # -> Any | type:
        """Retrieve the wrapped factory.Factory subclass."""
        ...
    def call(self, instance, step, context): ...

class RelatedFactoryList(RelatedFactory):
    """Calls a factory 'size' times once the object has been generated.

    Attributes:
        factory (Factory): the factory to call "size-times"
        defaults (dict): extra declarations for calling the related factory
        factory_related_name (str): the name to use to refer to the generated
            object when calling the related factory
        size (int|lambda): the number of times 'factory' is called, ultimately
            returning a list of 'factory' objects w/ size 'size'.
    """

    def __init__(
        self, factory, factory_related_name=..., size=..., **defaults
    ) -> None: ...
    def call(self, instance, step, context): ...

class NotProvided: ...

class PostGenerationMethodCall(PostGenerationDeclaration):
    """Calls a method of the generated object.

    Attributes:
        method_name (str): the method to call
        method_args (list): arguments to pass to the method
        method_kwargs (dict): keyword arguments to pass to the method

    Example:
        class UserFactory(factory.Factory):
            ...
            password = factory.PostGenerationMethodCall('set_pass', password='')
    """

    def __init__(self, method_name, *args, **kwargs) -> None: ...
    def call(self, instance, step, context): ...
