"""
This type stub file was generated by pyright.
"""

from . import base, declarations

"""factory_boy extensions for use with the Django framework."""
logger = ...
DEFAULT_DB_ALIAS = ...
_LAZY_LOADS = ...

def get_model(app, model):
    """Wrapper around django's get_model."""
    ...

class DjangoOptions(base.FactoryOptions):
    def get_model_class(self): ...

class DjangoModelFactory(base.Factory):
    """Factory for Django models.

    This makes sure that the 'sequence' field of created objects is a new id.

    Possible improvement: define a new 'attribute' type, AutoField, which would
    handle those for non-numerical primary keys.
    """

    _options_class = DjangoOptions

    class Meta:
        abstract = ...

class FileField(declarations.BaseDeclaration):
    """Helper to fill in django.db.models.FileField from a Factory."""

    DEFAULT_FILENAME = ...
    def evaluate(self, instance, step, extra):  # -> File:
        """Fill in the field."""
        ...

class ImageField(FileField):
    DEFAULT_FILENAME = ...

class mute_signals:
    """Temporarily disables and then restores any django signals.

    Args:
        *signals (django.dispatch.dispatcher.Signal): any django signals

    Examples:
        with mute_signals(pre_init):
            user = UserFactory.build()
            ...

        @mute_signals(pre_save, post_save)
        class UserFactory(factory.Factory):
            ...

        @mute_signals(post_save)
        def generate_users():
            UserFactory.create_batch(10)
    """

    def __init__(self, *signals) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...
    def copy(self): ...
    def __call__(self, callable_obj): ...
    def wrap_method(self, method): ...
