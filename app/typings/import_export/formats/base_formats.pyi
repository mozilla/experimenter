"""
This type stub file was generated by pyright.
"""

class Format:
    def get_title(self): ...
    def create_dataset(self, in_stream):
        """
        Create dataset from given string.
        """
        ...
    def export_data(self, dataset, **kwargs):
        """
        Returns format representation for given dataset.
        """
        ...
    def is_binary(self):  # -> Literal[True]:
        """
        Returns if this format is binary.
        """
        ...
    def get_read_mode(self):  # -> Literal['rb']:
        """
        Returns mode for opening files.
        """
        ...
    def get_extension(self):  # -> Literal['']:
        """
        Returns extension for this format files.
        """
        ...
    def get_content_type(self): ...
    @classmethod
    def is_available(cls): ...
    def can_import(self): ...
    def can_export(self): ...

class TablibFormat(Format):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...
    def get_format(self):  # -> ModuleType:
        """
        Import and returns tablib module.
        """
        ...
    @classmethod
    def is_available(cls): ...
    def get_title(self): ...
    def create_dataset(self, in_stream, **kwargs): ...
    def export_data(self, dataset, **kwargs): ...
    def get_extension(self): ...
    def get_content_type(self): ...
    def can_import(self): ...
    def can_export(self): ...

class TextFormat(TablibFormat):
    def get_read_mode(self): ...
    def is_binary(self): ...

class CSV(TextFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...
    def create_dataset(self, in_stream, **kwargs): ...

class JSON(TextFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...

class YAML(TextFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...

class TSV(TextFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...
    def create_dataset(self, in_stream, **kwargs): ...

class ODS(TextFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...

class HTML(TextFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...

class XLS(TablibFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...
    def create_dataset(self, in_stream):  # -> Dataset:
        """
        Create dataset from first sheet.
        """
        ...

class XLSX(TablibFormat):
    TABLIB_MODULE = ...
    CONTENT_TYPE = ...
    def create_dataset(self, in_stream):  # -> Dataset:
        """
        Create dataset from first sheet.
        """
        ...

DEFAULT_FORMATS = ...
