"""
This type stub file was generated by pyright.
"""

from rest_framework.renderers import *

log = ...

class CSVRenderer(BaseRenderer):
    """
    Renderer which serializes to CSV
    """

    media_type = ...
    format = ...
    level_sep = ...
    header = ...
    labels = ...
    writer_opts = ...
    def render(
        self, data, media_type=..., renderer_context=..., writer_opts=...
    ):  # -> bytes | Literal['']:
        """
        Renders serialized *data* into CSV. For a dictionary:
        """
        ...
    def tablize(
        self, data, header=..., labels=...
    ):  # -> Generator[list[Unknown] | Unknown | list[Unknown | None], None, None]:
        """
        Convert a list of data into a table.

        If there is a header provided to tablize it will efficiently yield each
        row as needed. If no header is provided, tablize will need to process
        each row in the data in order to construct a complete header. Thus, if
        you have a lot of data and want to stream it, you should probably
        provide a header to the renderer (using the `header` attribute, or via
        the `renderer_context`).
        """
        ...
    def flatten_data(self, data):  # -> Generator[dict[str, Unknown], None, None]:
        """
        Convert the given data collection to a list of dictionaries that are
        each exactly one level deep. The key for each value in the dictionaries
        designates the name of the column that the value will fall into.
        """
        ...
    def flatten_item(self, item): ...
    def nest_flat_item(self, flat_item, prefix):  # -> dict[Unknown, Unknown]:
        """
        Given a "flat item" (a dictionary exactly one level deep), nest all of
        the column headers in a namespace designated by prefix.  For example:

         header... | with prefix... | becomes...
        -----------|----------------|----------------
         'lat'     | 'location'     | 'location.lat'
         ''        | '0'            | '0'
         'votes.1' | 'user'         | 'user.votes.1'

        """
        ...
    def flatten_list(self, l): ...
    def flatten_dict(self, d): ...
    def headers(): ...
    headers = ...

class CSVRendererWithUnderscores(CSVRenderer):
    level_sep = ...

class CSVStreamingRenderer(CSVRenderer):
    def render(
        self, data, media_type=..., renderer_context=...
    ):  # -> Generator[Any | Literal['', b'ï»¿'], None, None]:
        """
        Renders serialized *data* into CSV to be used with Django
        StreamingHttpResponse. We need to return a generator here, so Django
        can iterate over it, rendering and returning each line.

        >>> renderer = CSVStreamingRenderer()
        >>> renderer.header = ['a', 'b']
        >>> data = [{'a': 1, 'b': 2}]
        >>> from django.http import StreamingHttpResponse
        >>> response = StreamingHttpResponse(renderer.render(data),
                                             content_type='text/csv')
        >>> response['Content-Disposition'] = 'attachment; filename="f.csv"'
        >>> # return response

        """
        ...

class PaginatedCSVRenderer(CSVRenderer):
    """
    Paginated renderer (when pagination is turned on for DRF)
    """

    results_field = ...
    def render(self, data, *args, **kwargs): ...
