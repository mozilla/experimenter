"""
This type stub file was generated by pyright.
"""

import asyncio
import inspect
import urllib
from typing import Any, Callable, Dict, Optional

from sentry_sdk._functools import partial
from sentry_sdk._types import MYPY, Event, Hint
from sentry_sdk.hub import Hub, _should_send_default_pii
from sentry_sdk.integrations._wsgi_common import _filter_headers
from sentry_sdk.sessions import auto_session_tracking
from sentry_sdk.tracing import SOURCE_FOR_STYLE, TRANSACTION_SOURCE_ROUTE, Transaction
from sentry_sdk.utils import (
    CONTEXTVARS_ERROR_MESSAGE,
    HAS_REAL_CONTEXTVARS,
    ContextVar,
    event_from_exception,
    transaction_from_function,
)
from typing_extensions import Literal

"""
An ASGI middleware.

Based on Tom Christie's `sentry-asgi <https://github.com/encode/sentry-asgi>`_.
"""
if MYPY: ...
_asgi_middleware_applied = ...
_DEFAULT_TRANSACTION_NAME = ...
TRANSACTION_STYLE_VALUES = ...

class SentryAsgiMiddleware:
    __slots__ = ...
    def __init__(
        self,
        app: Any,
        unsafe_context_data: bool = ...,
        transaction_style: str = ...,
        mechanism_type: str = ...,
    ) -> None:
        """
        Instrument an ASGI application with Sentry. Provides HTTP/websocket
        data to sent events and basic handling for exceptions bubbling up
        through the middleware.

        :param unsafe_context_data: Disable errors when a proper contextvars installation could not be found. We do not recommend changing this from the default.
        """
        ...
    def event_processor(
        self, event: Event, hint: Hint, asgi_scope: Any
    ) -> Optional[Event]: ...
