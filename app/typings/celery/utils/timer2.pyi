"""
This type stub file was generated by pyright.
"""

import threading

from kombu.asynchronous.timer import Entry
from kombu.asynchronous.timer import Timer as Schedule

"""Scheduler for Python functions.

.. note::
    This is used for the thread-based worker only,
    not for amqp/redis/sqs/qpid where :mod:`kombu.asynchronous.timer` is used.
"""
TIMER_DEBUG = ...
__all__ = ("Entry", "Schedule", "Timer", "to_timestamp")

class Timer(threading.Thread):
    """Timer thread.

    Note:
        This is only used for transports not supporting AsyncIO.
    """

    Entry = Entry
    Schedule = Schedule
    running = ...
    on_tick = ...
    _timer_count = ...
    if TIMER_DEBUG:
        def start(self, *args, **kwargs): ...

    def __init__(
        self,
        schedule=...,
        on_error=...,
        on_tick=...,
        on_start=...,
        max_interval=...,
        **kwargs
    ) -> None: ...
    __next__ = ...
    def run(self): ...
    def stop(self): ...
    def ensure_started(self): ...
    def enter(self, entry, eta, priority=...): ...
    def call_at(self, *args, **kwargs): ...
    def enter_after(self, *args, **kwargs): ...
    def call_after(self, *args, **kwargs): ...
    def call_repeatedly(self, *args, **kwargs): ...
    def exit_after(self, secs, priority=...): ...
    def cancel(self, tref): ...
    def clear(self): ...
    def empty(self): ...
    def __len__(self): ...
    def __bool__(self):  # -> Literal[True]:
        """``bool(timer)``."""
        ...
    __nonzero__ = ...
    @property
    def queue(self): ...
