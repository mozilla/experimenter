"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager

"""Utilities related to importing modules and symbols by name."""
MP_MAIN_FILE = ...
__all__ = (
    "NotAPackage",
    "qualname",
    "instantiate",
    "symbol_by_name",
    "cwd_in_path",
    "find_module",
    "import_from_cwd",
    "reload_from_cwd",
    "module_file",
    "gen_task_name",
)

class NotAPackage(Exception):
    """Raised when importing a package, but it's not a package."""

    ...

def qualname(obj):  # -> Any | None:
    """Return object name."""
    ...

def instantiate(name, *args, **kwargs):  # -> Any:
    """Instantiate class by name.

    See Also:
        :func:`symbol_by_name`.
    """
    ...

@contextmanager
def cwd_in_path():  # -> Generator[str | None, None, None]:
    """Context adding the current working directory to sys.path."""
    ...

def find_module(module, path=..., imp=...):  # -> ModuleType:
    """Version of :func:`imp.find_module` supporting dots."""
    ...

def import_from_cwd(module, imp=..., package=...):  # -> ModuleType:
    """Import module, temporarily including modules in the current directory.

    Modules located in the current directory has
    precedence over modules located in `sys.path`.
    """
    ...

def reload_from_cwd(module, reloader=...):  # -> ModuleType:
    """Reload module (ensuring that CWD is in sys.path)."""
    ...

def module_file(module):
    """Return the correct original file name of a module."""
    ...

def gen_task_name(app, name, module_name):  # -> LiteralString | str:
    """Generate task name from name/module pair."""
    ...

def load_extension_class_names(namespace): ...
def load_extension_classes(namespace): ...
