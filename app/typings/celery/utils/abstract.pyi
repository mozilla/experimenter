"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from collections.abc import Callable

"""Abstract classes."""
__all__ = ("CallableTask", "CallableSignature")

class _AbstractClass(metaclass=ABCMeta):
    __required_attributes__ = ...
    @classmethod
    def register(cls, other): ...

class CallableTask(_AbstractClass, Callable):
    """Task interface."""

    __required_attributes__ = ...
    @abstractmethod
    def delay(self, *args, **kwargs): ...
    @abstractmethod
    def apply_async(self, *args, **kwargs): ...
    @abstractmethod
    def apply(self, *args, **kwargs): ...
    @classmethod
    def __subclasshook__(cls, C): ...

class CallableSignature(CallableTask):
    """Celery Signature interface."""

    __required_attributes__ = ...
    @property
    @abstractmethod
    def name(self): ...
    @property
    @abstractmethod
    def type(self): ...
    @property
    @abstractmethod
    def app(self): ...
    @property
    @abstractmethod
    def id(self): ...
    @property
    @abstractmethod
    def task(self): ...
    @property
    @abstractmethod
    def args(self): ...
    @property
    @abstractmethod
    def kwargs(self): ...
    @property
    @abstractmethod
    def options(self): ...
    @property
    @abstractmethod
    def subtask_type(self): ...
    @property
    @abstractmethod
    def chord_size(self): ...
    @property
    @abstractmethod
    def immutable(self): ...
    @abstractmethod
    def clone(self, args=..., kwargs=...): ...
    @abstractmethod
    def freeze(self, id=..., group_id=..., chord=..., root_id=..., group_index=...): ...
    @abstractmethod
    def set(self, immutable=..., **options): ...
    @abstractmethod
    def link(self, callback): ...
    @abstractmethod
    def link_error(self, errback): ...
    @abstractmethod
    def __or__(self, other): ...
    @abstractmethod
    def __invert__(self): ...
    @classmethod
    def __subclasshook__(cls, C): ...
