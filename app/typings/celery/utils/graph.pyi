"""
This type stub file was generated by pyright.
"""

"""Dependency graph implementation."""
__all__ = ("DOT", "CycleError", "DependencyGraph", "GraphFormatter")

class DOT:
    """Constants related to the dot format."""

    HEAD = ...
    ATTR = ...
    NODE = ...
    EDGE = ...
    ATTRSEP = ...
    DIRS = ...
    TAIL = ...

class CycleError(Exception):
    """A cycle was detected in an acyclic graph."""

    ...

class DependencyGraph:
    """A directed acyclic graph of objects and their dependencies.

    Supports a robust topological sort
    to detect the order in which they must be handled.

    Takes an optional iterator of ``(obj, dependencies)``
    tuples to build the graph from.

    Warning:
        Does not support cycle detection.
    """

    def __init__(self, it=..., formatter=...) -> None: ...
    def add_arc(self, obj):  # -> None:
        """Add an object to the graph."""
        ...
    def add_edge(self, A, B):  # -> None:
        """Add an edge from object ``A`` to object ``B``.

        I.e. ``A`` depends on ``B``.
        """
        ...
    def connect(self, graph):  # -> None:
        """Add nodes from another graph."""
        ...
    def topsort(self):  # -> list[Unknown]:
        """Sort the graph topologically.

        Returns:
            List: of objects in the order in which they must be handled.
        """
        ...
    def valency_of(self, obj):  # -> int:
        """Return the valency (degree) of a vertex in the graph."""
        ...
    def update(self, it):  # -> None:
        """Update graph with data from a list of ``(obj, deps)`` tuples."""
        ...
    def edges(self):  # -> Generator[Unknown, None, None]:
        """Return generator that yields for all edges in the graph."""
        ...
    def to_dot(self, fh, formatter=...):  # -> None:
        """Convert the graph to DOT format.

        Arguments:
            fh (IO): A file, or a file-like object to write the graph to.
            formatter (celery.utils.graph.GraphFormatter): Custom graph
                formatter to use.
        """
        ...
    def format(self, obj): ...
    def __iter__(self): ...
    def __getitem__(self, node): ...
    def __len__(self): ...
    def __contains__(self, obj): ...
    items = ...
    def __repr__(self): ...
    def repr_node(self, obj, level=..., fmt=...): ...

class GraphFormatter:
    """Format dependency graphs."""

    _attr = ...
    _node = ...
    _edge = ...
    _head = ...
    _tail = ...
    _attrsep = ...
    _dirs = ...
    scheme = ...
    edge_scheme = ...
    node_scheme = ...
    term_scheme = ...
    graph_scheme = ...
    def __init__(
        self, root=..., type=..., id=..., indent=..., inw=..., **scheme
    ) -> None: ...
    def attr(self, name, value): ...
    def attrs(self, d, scheme=...): ...
    def head(self, **attrs): ...
    def tail(self): ...
    def label(self, obj): ...
    def node(self, obj, **attrs): ...
    def terminal_node(self, obj, **attrs): ...
    def edge(self, a, b, **attrs): ...
    def FMT(self, fmt, *args, **kwargs): ...
    def draw_edge(self, a, b, scheme=..., attrs=...): ...
    def draw_node(self, obj, scheme=..., attrs=...): ...
