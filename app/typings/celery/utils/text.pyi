"""
This type stub file was generated by pyright.
"""

import io
from typing import Any, List, Mapping, Pattern

"""Text formatting utilities."""
__all__ = (
    "abbr",
    "abbrtask",
    "dedent",
    "dedent_initial",
    "ensure_newlines",
    "ensure_sep",
    "fill_paragraphs",
    "indent",
    "join",
    "pluralize",
    "pretty",
    "str_to_list",
    "simple_format",
    "truncate",
)
UNKNOWN_SIMPLE_FORMAT_KEY = ...
RE_FORMAT = ...

def str_to_list(s: str) -> List[str]:
    """Convert string to list."""
    ...

def dedent_initial(s: str, n: int = ...) -> str:
    """Remove indentation from first line of text."""
    ...

def dedent(s: str, n: int = ..., sep: str = ...) -> str:
    """Remove indentation."""
    ...

def fill_paragraphs(s: str, width: int, sep: str = ...) -> str:
    """Fill paragraphs with newlines (or custom separator)."""
    ...

def join(l: str, sep: str = ...) -> str:
    """Concatenate list of strings."""
    ...

def ensure_sep(sep: str, s: str, n: int = ...) -> str:
    """Ensure text s ends in separator sep'."""
    ...

ensure_newlines = ...

def abbr(S: str, max: int, ellipsis: str = ...) -> str:
    """Abbreviate word."""
    ...

def abbrtask(S: str, max: int) -> str:
    """Abbreviate task name."""
    ...

def indent(t: str, indent: int = ..., sep: str = ...) -> str:
    """Indent text."""
    ...

def truncate(s: str, maxlen: int = ..., suffix: str = ...) -> str:
    """Truncate text to a maximum number of characters."""
    ...

def pluralize(n: int, text: str, suffix: str = ...) -> str:
    """Pluralize term when n is greater than one."""
    ...

def pretty(
    value: str, width: int = ..., nl_width: int = ..., sep: str = ..., **kw: Any
) -> str:
    """Format value for printing to console."""
    ...

def match_case(s: str, other: str) -> str: ...
def simple_format(
    s: str, keys: Mapping[str, str], pattern: Pattern = ..., expand: str = ...
) -> str:
    """Format string, expanding abbreviations in keys'."""
    ...

def remove_repeating_from_task(task_name: str, s: str) -> str:
    """Given task name, remove repeating module names.

    Example:
        >>> remove_repeating_from_task(
        ...     'tasks.add',
        ...     'tasks.add(2, 2), tasks.mul(3), tasks.div(4)')
        'tasks.add(2, 2), mul(3), div(4)'
    """
    ...

def remove_repeating(substr: str, s: str) -> str:
    """Remove repeating module names from string.

    Arguments:
        task_name (str): Task name (full path including module),
            to use as the basis for removing module names.
        s (str): The string we want to work on.

    Example:

        >>> _shorten_names(
        ...    'x.tasks.add',
        ...    'x.tasks.add(2, 2) | x.tasks.add(4) | x.tasks.mul(8)',
        ... )
        'x.tasks.add(2, 2) | add(4) | mul(8)'
    """
    ...

StringIO = io.StringIO
_SIO_write = ...
_SIO_init = ...

class WhateverIO(StringIO):
    """StringIO that takes bytes or str."""

    def __init__(self, v=..., *a, **kw) -> None: ...
    def write(self, data): ...
