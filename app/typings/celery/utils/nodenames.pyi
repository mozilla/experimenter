"""
This type stub file was generated by pyright.
"""

"""Worker name utilities."""
WORKER_DIRECT_EXCHANGE = ...
WORKER_DIRECT_QUEUE_FORMAT = ...
NODENAME_SEP = ...
NODENAME_DEFAULT = ...
gethostname = ...
__all__ = (
    "worker_direct",
    "gethostname",
    "nodename",
    "anon_nodename",
    "nodesplit",
    "default_nodename",
    "node_format",
    "host_format",
)

def worker_direct(hostname):  # -> Queue:
    """Return the :class:`kombu.Queue` being a direct route to a worker.

    Arguments:
        hostname (str, ~kombu.Queue): The fully qualified node name of
            a worker (e.g., ``w1@example.com``).  If passed a
            :class:`kombu.Queue` instance it will simply return
            that instead.
    """
    ...

def nodename(name, hostname):  # -> LiteralString:
    """Create node name from name/hostname pair."""
    ...

def anon_nodename(hostname=..., prefix=...):  # -> LiteralString:
    """Return the nodename for this process (not a worker).

    This is used for e.g. the origin task message field.
    """
    ...

def nodesplit(name):  # -> tuple[None, Unknown]:
    """Split node name into tuple of name/hostname."""
    ...

def default_nodename(hostname):  # -> LiteralString:
    """Return the default nodename for this process."""
    ...

def node_format(s, name, **extra):  # -> str:
    """Format worker node name (name@host.com)."""
    ...

_fmt_process_index_with_prefix = ...

def host_format(s, host=..., name=..., **extra):  # -> str:
    """Format host %x abbreviations."""
    ...
