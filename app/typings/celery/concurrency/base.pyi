"""
This type stub file was generated by pyright.
"""

from celery.utils import timer2

"""Base Execution Pool."""
__all__ = ("BasePool", "apply_target")
logger = ...

def apply_target(
    target,
    args=...,
    kwargs=...,
    callback=...,
    accept_callback=...,
    pid=...,
    getpid=...,
    propagate=...,
    monotonic=...,
    **_
):  # -> None:
    """Apply function within pool context."""
    ...

class BasePool:
    """Task pool."""

    RUN = ...
    CLOSE = ...
    TERMINATE = ...
    Timer = timer2.Timer
    signal_safe = ...
    is_green = ...
    _state = ...
    _pool = ...
    _does_debug = ...
    uses_semaphore = ...
    task_join_will_block = ...
    body_can_be_buffer = ...
    def __init__(
        self,
        limit=...,
        putlocks=...,
        forking_enable=...,
        callbacks_propagate=...,
        app=...,
        **options
    ) -> None: ...
    def on_start(self): ...
    def did_start_ok(self): ...
    def flush(self): ...
    def on_stop(self): ...
    def register_with_event_loop(self, loop): ...
    def on_apply(self, *args, **kwargs): ...
    def on_terminate(self): ...
    def on_soft_timeout(self, job): ...
    def on_hard_timeout(self, job): ...
    def maintain_pool(self, *args, **kwargs): ...
    def terminate_job(self, pid, signal=...): ...
    def restart(self): ...
    def stop(self): ...
    def terminate(self): ...
    def start(self): ...
    def close(self): ...
    def on_close(self): ...
    def apply_async(self, target, args=..., kwargs=..., **options):  # -> None:
        """Equivalent of the :func:`apply` built-in function.

        Callbacks should optimally return as soon as possible since
        otherwise the thread which handles the result will get blocked.
        """
        ...
    @property
    def info(self): ...
    @property
    def active(self): ...
    @property
    def num_processes(self): ...
