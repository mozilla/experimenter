"""
This type stub file was generated by pyright.
"""

import click
from celery.bin.base import (
    COMMA_SEPARATED_LIST,
    LOG_LEVEL,
    CeleryDaemonCommand,
    CeleryOption,
    handle_preload_options,
)
from celery.utils.nodenames import default_nodename, host_format
from click import ParamType
from click.types import StringParamType

"""Program used to start a Celery worker instance."""
logger = ...

class CeleryBeat(ParamType):
    """Celery Beat flag."""

    name = ...
    def convert(self, value, param, ctx): ...

class WorkersPool(click.Choice):
    """Workers pool option."""

    name = ...
    def __init__(self) -> None:
        """Initialize the workers pool option with the relevant choices."""
        ...
    def convert(self, value, param, ctx): ...

class Hostname(StringParamType):
    """Hostname option."""

    name = ...
    def convert(self, value, param, ctx): ...

class Autoscale(ParamType):
    """Autoscaling parameter."""

    name = ...
    def convert(self, value, param, ctx): ...

CELERY_BEAT = ...
WORKERS_POOL = ...
HOSTNAME = ...
AUTOSCALE = ...
C_FAKEFORK = ...

def detach(
    path,
    argv,
    logfile=...,
    pidfile=...,
    uid=...,
    gid=...,
    umask=...,
    workdir=...,
    fake=...,
    app=...,
    executable=...,
    hostname=...,
):  # -> Literal[1]:
    """Detach program by argv."""
    ...

@click.command(cls=CeleryDaemonCommand, context_settings={"allow_extra_args": True})
@click.option(
    "-n",
    "--hostname",
    default=host_format(default_nodename(None)),
    cls=CeleryOption,
    type=HOSTNAME,
    help_group="Worker Options",
    help="Set custom hostname (e.g., 'w1@%%h').  "
    "Expands: %%h (hostname), %%n (name) and %%d, (domain).",
)
@click.option(
    "-D",
    "--detach",
    cls=CeleryOption,
    is_flag=True,
    default=False,
    help_group="Worker Options",
    help="Start worker as a background process.",
)
@click.option(
    "-S",
    "--statedb",
    cls=CeleryOption,
    type=click.Path(),
    callback=lambda ctx, _, value: value or ctx.obj.app.conf.worker_state_db,
    help_group="Worker Options",
    help="Path to the state database. The extension '.db' may be "
    "appended to the filename.",
)
@click.option(
    "-l",
    "--loglevel",
    default="WARNING",
    cls=CeleryOption,
    type=LOG_LEVEL,
    help_group="Worker Options",
    help="Logging level.",
)
@click.option(
    "optimization",
    "-O",
    default="default",
    cls=CeleryOption,
    type=click.Choice(("default", "fair")),
    help_group="Worker Options",
    help="Apply optimization profile.",
)
@click.option(
    "--prefetch-multiplier",
    type=int,
    metavar="<prefetch multiplier>",
    callback=lambda ctx, _, value: value or ctx.obj.app.conf.worker_prefetch_multiplier,
    cls=CeleryOption,
    help_group="Worker Options",
    help="Set custom prefetch multiplier value" "for this worker instance.",
)
@click.option(
    "-c",
    "--concurrency",
    type=int,
    metavar="<concurrency>",
    callback=lambda ctx, _, value: value or ctx.obj.app.conf.worker_concurrency,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Number of child processes processing the queue.  "
    "The default is the number of CPUs available"
    "on your system.",
)
@click.option(
    "-P",
    "--pool",
    default="prefork",
    type=WORKERS_POOL,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Pool implementation.",
)
@click.option(
    "-E",
    "--task-events",
    "--events",
    is_flag=True,
    default=None,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Send task-related events that can be captured by monitors"
    " like celery events, celerymon, and others.",
)
@click.option(
    "--time-limit",
    type=float,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Enables a hard time limit " "(in seconds int/float) for tasks.",
)
@click.option(
    "--soft-time-limit",
    type=float,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Enables a soft time limit " "(in seconds int/float) for tasks.",
)
@click.option(
    "--max-tasks-per-child",
    type=int,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Maximum number of tasks a pool worker can execute before "
    "it's terminated and replaced by a new worker.",
)
@click.option(
    "--max-memory-per-child",
    type=int,
    cls=CeleryOption,
    help_group="Pool Options",
    help="Maximum amount of resident memory, in KiB, that may be "
    "consumed by a child process before it will be replaced "
    "by a new one.  If a single task causes a child process "
    "to exceed this limit, the task will be completed and "
    "the child process will be replaced afterwards.\n"
    "Default: no limit.",
)
@click.option(
    "--purge", "--discard", is_flag=True, cls=CeleryOption, help_group="Queue Options"
)
@click.option(
    "--queues",
    "-Q",
    type=COMMA_SEPARATED_LIST,
    cls=CeleryOption,
    help_group="Queue Options",
)
@click.option(
    "--exclude-queues",
    "-X",
    type=COMMA_SEPARATED_LIST,
    cls=CeleryOption,
    help_group="Queue Options",
)
@click.option(
    "--include",
    "-I",
    type=COMMA_SEPARATED_LIST,
    cls=CeleryOption,
    help_group="Queue Options",
)
@click.option("--without-gossip", is_flag=True, cls=CeleryOption, help_group="Features")
@click.option("--without-mingle", is_flag=True, cls=CeleryOption, help_group="Features")
@click.option(
    "--without-heartbeat", is_flag=True, cls=CeleryOption, help_group="Features"
)
@click.option("--heartbeat-interval", type=int, cls=CeleryOption, help_group="Features")
@click.option("--autoscale", type=AUTOSCALE, cls=CeleryOption, help_group="Features")
@click.option(
    "-B",
    "--beat",
    type=CELERY_BEAT,
    cls=CeleryOption,
    is_flag=True,
    help_group="Embedded Beat Options",
)
@click.option(
    "-s",
    "--schedule-filename",
    "--schedule",
    callback=lambda ctx, _, value: value or ctx.obj.app.conf.beat_schedule_filename,
    cls=CeleryOption,
    help_group="Embedded Beat Options",
)
@click.option("--scheduler", cls=CeleryOption, help_group="Embedded Beat Options")
@click.pass_context
@handle_preload_options
def worker(
    ctx,
    hostname=...,
    pool_cls=...,
    app=...,
    uid=...,
    gid=...,
    loglevel=...,
    logfile=...,
    pidfile=...,
    statedb=...,
    **kwargs
):  # -> Literal[1] | None:
    """Start worker instance.

    Examples
    --------
    $ celery --app=proj worker -l INFO
    $ celery -A proj worker -l INFO -Q hipri,lopri
    $ celery -A proj worker --concurrency=4
    $ celery -A proj worker --concurrency=1000 -P eventlet
    $ celery worker --autoscale=10,0

    """
    ...
