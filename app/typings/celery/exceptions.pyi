"""
This type stub file was generated by pyright.
"""

from click import ClickException

"""Celery error types.

Error Hierarchy
===============

- :exc:`Exception`
    - :exc:`celery.exceptions.CeleryError`
        - :exc:`~celery.exceptions.ImproperlyConfigured`
        - :exc:`~celery.exceptions.SecurityError`
        - :exc:`~celery.exceptions.TaskPredicate`
            - :exc:`~celery.exceptions.Ignore`
            - :exc:`~celery.exceptions.Reject`
            - :exc:`~celery.exceptions.Retry`
        - :exc:`~celery.exceptions.TaskError`
            - :exc:`~celery.exceptions.QueueNotFound`
            - :exc:`~celery.exceptions.IncompleteStream`
            - :exc:`~celery.exceptions.NotRegistered`
            - :exc:`~celery.exceptions.AlreadyRegistered`
            - :exc:`~celery.exceptions.TimeoutError`
            - :exc:`~celery.exceptions.MaxRetriesExceededError`
            - :exc:`~celery.exceptions.TaskRevokedError`
            - :exc:`~celery.exceptions.InvalidTaskError`
            - :exc:`~celery.exceptions.ChordError`
        - :exc:`~celery.exceptions.BackendError`
            - :exc:`~celery.exceptions.BackendGetMetaError`
            - :exc:`~celery.exceptions.BackendStoreError`
    - :class:`kombu.exceptions.KombuError`
        - :exc:`~celery.exceptions.OperationalError`

            Raised when a transport connection error occurs while
            sending a message (be it a task, remote control command error).

            .. note::
                This exception does not inherit from
                :exc:`~celery.exceptions.CeleryError`.
    - **billiard errors** (prefork pool)
        - :exc:`~celery.exceptions.SoftTimeLimitExceeded`
        - :exc:`~celery.exceptions.TimeLimitExceeded`
        - :exc:`~celery.exceptions.WorkerLostError`
        - :exc:`~celery.exceptions.Terminated`
- :class:`UserWarning`
    - :class:`~celery.exceptions.CeleryWarning`
        - :class:`~celery.exceptions.AlwaysEagerIgnored`
        - :class:`~celery.exceptions.DuplicateNodenameWarning`
        - :class:`~celery.exceptions.FixupWarning`
        - :class:`~celery.exceptions.NotConfigured`
        - :class:`~celery.exceptions.SecurityWarning`
- :exc:`BaseException`
    - :exc:`SystemExit`
        - :exc:`~celery.exceptions.WorkerTerminate`
        - :exc:`~celery.exceptions.WorkerShutdown`
"""
__all__ = (
    "reraise",
    "CeleryWarning",
    "AlwaysEagerIgnored",
    "DuplicateNodenameWarning",
    "FixupWarning",
    "NotConfigured",
    "SecurityWarning",
    "CeleryError",
    "ImproperlyConfigured",
    "SecurityError",
    "OperationalError",
    "TaskPredicate",
    "Ignore",
    "Reject",
    "Retry",
    "TaskError",
    "QueueNotFound",
    "IncompleteStream",
    "NotRegistered",
    "AlreadyRegistered",
    "TimeoutError",
    "MaxRetriesExceededError",
    "TaskRevokedError",
    "InvalidTaskError",
    "ChordError",
    "BackendError",
    "BackendGetMetaError",
    "BackendStoreError",
    "SoftTimeLimitExceeded",
    "TimeLimitExceeded",
    "WorkerLostError",
    "Terminated",
    "CPendingDeprecationWarning",
    "CDeprecationWarning",
    "WorkerShutdown",
    "WorkerTerminate",
    "CeleryCommandException",
)
UNREGISTERED_FMT = ...

def reraise(tp, value, tb=...):
    """Reraise exception."""
    ...

class CeleryWarning(UserWarning):
    """Base class for all Celery warnings."""

    ...

class AlwaysEagerIgnored(CeleryWarning):
    """send_task ignores :setting:`task_always_eager` option."""

    ...

class DuplicateNodenameWarning(CeleryWarning):
    """Multiple workers are using the same nodename."""

    ...

class FixupWarning(CeleryWarning):
    """Fixup related warning."""

    ...

class NotConfigured(CeleryWarning):
    """Celery hasn't been configured, as no config module has been found."""

    ...

class SecurityWarning(CeleryWarning):
    """Potential security issue found."""

    ...

class CeleryError(Exception):
    """Base class for all Celery errors."""

    ...

class TaskPredicate(CeleryError):
    """Base class for task-related semi-predicates."""

    ...

class Retry(TaskPredicate):
    """The task is to be retried later."""

    message = ...
    exc = ...
    when = ...
    def __init__(
        self, message=..., exc=..., when=..., is_eager=..., sig=..., **kwargs
    ) -> None: ...
    def humanize(self): ...
    def __str__(self) -> str: ...
    def __reduce__(self): ...

RetryTaskError = Retry

class Ignore(TaskPredicate):
    """A task can raise this to ignore doing state updates."""

    ...

class Reject(TaskPredicate):
    """A task can raise this if it wants to reject/re-queue the message."""

    def __init__(self, reason=..., requeue=...) -> None: ...
    def __repr__(self): ...

class ImproperlyConfigured(CeleryError):
    """Celery is somehow improperly configured."""

    ...

class SecurityError(CeleryError):
    """Security related exception."""

    ...

class TaskError(CeleryError):
    """Task related errors."""

    ...

class QueueNotFound(KeyError, TaskError):
    """Task routed to a queue not in ``conf.queues``."""

    ...

class IncompleteStream(TaskError):
    """Found the end of a stream of data, but the data isn't complete."""

    ...

class NotRegistered(KeyError, TaskError):
    """The task is not registered."""

    def __repr__(self): ...

class AlreadyRegistered(TaskError):
    """The task is already registered."""

    ...

class TimeoutError(TaskError):
    """The operation timed out."""

    ...

class MaxRetriesExceededError(TaskError):
    """The tasks max restart limit has been exceeded."""

    def __init__(self, *args, **kwargs) -> None: ...

class TaskRevokedError(TaskError):
    """The task has been revoked, so no result available."""

    ...

class InvalidTaskError(TaskError):
    """The task has invalid data or ain't properly constructed."""

    ...

class ChordError(TaskError):
    """A task part of the chord raised an exception."""

    ...

class CPendingDeprecationWarning(PendingDeprecationWarning):
    """Warning of pending deprecation."""

    ...

class CDeprecationWarning(DeprecationWarning):
    """Warning of deprecation."""

    ...

class WorkerTerminate(SystemExit):
    """Signals that the worker should terminate immediately."""

    ...

SystemTerminate = WorkerTerminate

class WorkerShutdown(SystemExit):
    """Signals that the worker should perform a warm shutdown."""

    ...

class BackendError(Exception):
    """An issue writing or reading to/from the backend."""

    ...

class BackendGetMetaError(BackendError):
    """An issue reading from the backend."""

    def __init__(self, *args, **kwargs) -> None: ...
    def __repr__(self): ...

class BackendStoreError(BackendError):
    """An issue writing to the backend."""

    def __init__(self, *args, **kwargs) -> None: ...
    def __repr__(self): ...

class CeleryCommandException(ClickException):
    """A general command exception which stores an exit code."""

    def __init__(self, message, exit_code) -> None: ...
