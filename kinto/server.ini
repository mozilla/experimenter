#
# Configuration for a local instance:
#
# - Autograph at http://autograph:8000
# - Multi-signoff enabled
# - Authentication via accounts
#
[app:main]
use = egg:kinto

kinto.project_name = Remote Settings LOCAL

kinto.includes = kinto.plugins.admin
                 kinto.plugins.accounts
                 kinto.plugins.history
                 kinto.plugins.flush
                 kinto_emailer
                 kinto_attachment
                 kinto_remote_settings

kinto.storage_backend = kinto.core.storage.memory
kinto.storage_url =
kinto.cache_backend = kinto.core.cache.memory
kinto.cache_url =
kinto.permission_backend = kinto.core.permission.memory
kinto.permission_url =

kinto.experimental_permissions_endpoint = true
kinto.experimental_collection_schema_validation = true

kinto.statsd_url = udp://localhost:8125

# Always return CORS headers
cornice.always_cors = true

multiauth.policies = account
multiauth.policy.account.use = kinto.plugins.accounts.authentication.AccountsAuthenticationPolicy
kinto.userid_hmac_secret = 284461170acd78f0be0827ef514754937474d7c922191e4f78be5c1d232b38c4

kinto.account_create_principals = system.Everyone
kinto.account_write_principals = account:admin

kinto.bucket_create_principals = system.Authenticated
kinto.bucket_write_principals = account:admin

#
# Kinto history
#
kinto.history.exclude_resources = /buckets/main-preview
                                  /buckets/main

#
# Kinto attachment
#

kinto.attachment.base_path = /tmp/attachments
kinto.attachment.base_url =
# See uwsgi static-map setting
kinto.attachment.extra.base_url = http://localhost:8888/attachments
kinto.attachment.folder = {bucket_id}/{collection_id}


#
# Kinto emailer
#
mail.default_sender = kinto@restmail.net
mail.debug_mailer = true
# mail.host = localhost
# mail.port = 25
# mail.username = None
# mail.password = None
# mail.tls = False
# mail.ssl = False
# mail.keyfile = None
# mail.certfile = None
# mail.queue_path = None
# mail.debug = 0
# mail.sendmail_app = /usr/sbin/sendmail
# mail.sendmail_template = {sendmail_app} -t -i -f {sender}


#
# Kinto Remote Settings
#

kinto.changes.resources =
    /buckets/main
    /buckets/main-preview
    /buckets/security-state
    /buckets/security-state-preview
    /buckets/blocklists
    /buckets/blocklists-preview

kinto.signer.resources =
    /buckets/main-workspace           -> /buckets/main-preview           -> /buckets/main
    /buckets/security-state-workspace -> /buckets/security-state-preview -> /buckets/security-state
    /buckets/staging                  -> /buckets/blocklists-preview     -> /buckets/blocklists

kinto.signer.to_review_enabled = true
kinto.signer.auto_create_resources = true

kinto.signer.signer_backend = kinto_remote_settings.signer.backends.autograph
# Use credentials from https://github.com/mozilla-services/autograph/blob/5b4a473/autograph.yaml
kinto.signer.autograph.server_url = http://autograph:8000
kinto.signer.autograph.hawk_id = kintodev
kinto.signer.autograph.hawk_secret = 3isey64n25fim18chqgewirm6z2gwva1mas0eu71e9jtisdwv6bd


#
# Simple daemon (see `run.sh start`)
#

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 8888


#
# Performant daemon (see `run.sh uwsgistart`)
#

[uwsgi]
wsgi-file = app.wsgi
master = true
module = kinto
static-map = /attachments=/tmp/attachments
plugin = dogstatsd

#
# Logging
#

[loggers]
keys = root, kinto

[handlers]
keys = console, sentry

[formatters]
keys = color, json, generic

[logger_root]
level = INFO
handlers = console

[logger_kinto]
level = DEBUG
handlers = console
qualname = kinto

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = color

[handler_sentry]
class = raven.handlers.logging.SentryHandler
args = ('https://<key>:<secret>@app.getsentry.com/<project>',)
level = ERROR
formatter = generic

[formatter_json]
class = kinto.core.JsonLogFormatter

[formatter_color]
class = logging_color_formatter.ColorFormatter

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
